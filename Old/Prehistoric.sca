
precision highp float;

// @param[default=25.0, min=0.0, max=50.0] NoiseStrength

void mainImage( in float NoiseStrength, in std::Texture2d Texture, out vec4 Return )
{
    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();

    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;

    // Readbackground and foreground images.
    vec3 bg = Texture.sample(uv).rgb;
    
    vec3 col = bg;

    // Sepia tone, from
    // https://www.techrepublic.com/blog/how-do-i/how-do-i-convert-images-to-grayscale-and-sepia-tone-using-c
	vec3 sepia = vec3(
        col.r * .393 + col.g *.769 + col.b * .189,
        col.r * .349 + col.g *.686 + col.b * .168,
		col.r * .272 + col.g *.534 + col.b * .131);
    
    // Film grain, from
    // https://www.reddit.com/r/opengl/comments/1rr4fy/any_good_ways_of_generating_film_grain_noise
    float noiseStrength = NoiseStrength;
    float x = (uv.x + 4.0) * (uv.y + 4.0) * (iTime * 10.0);
    vec3 grain = vec3(mod((mod(x, 13.0) + 1.0) * (mod(x, 123.0) + 1.0), 0.01) - 0.005) * noiseStrength;

    // This one is optional, it makes a small "tear" every now and then
    //if(mod(time, 100) > 98 && mod(texcoord.y, 10) > 7) grain = vec3(-3.0, -3.0, -3.0);
    
    // Output to screen
    Return = vec4(sepia+grain,1.0);
}