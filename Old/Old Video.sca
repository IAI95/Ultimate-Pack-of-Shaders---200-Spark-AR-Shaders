precision highp float;

// The MIT License
// Copyright Â© 2013 Javier Meseguer
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#define BLACK_AND_WHITE
//#define LINES_AND_FLICKER
//#define BLOTCHES
#define GRAIN

float rand(vec2 co)
{
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

float rand(float c)
{
	return rand(vec2(c,1.0));
}

float randomLine(float seed)
{
    vec2 uv;
	float b = 0.01 * rand(seed);
	float a = rand(seed+1.0);
	float c = rand(seed+2.0) - 0.5;
	float mu = rand(seed+3.0);
	
	float l = 1.0;
	
	if ( mu > 0.2)
		l = pow(  abs(a * uv.x + b * uv.y + c ), 1.0/8.0 );
	else
		l = 2.0 - pow( abs(a * uv.x + b * uv.y + c), 1.0/8.0 );				
	
	return mix(0.5, 1.0, l);
}

// Generate some blotches.
float randomBlotch(float seed)
{
    vec2 uv;
    vec2 iResolution = std::getRenderTargetSize();
	float x = rand(seed);
	float y = rand(seed+1.0);
	float s = 0.01 * rand(seed+2.0);
	
	vec2 p = vec2(x,y) - uv;
	p.x *= iResolution.x / iResolution.y;
	float a = atan(p.y,p.x);
	float v = 1.0;
	float ss = s*s * (sin(6.2831*a*x)*0.1 + 1.0);
	
	if ( dot(p,p) < ss ) v = 0.2;
	else
		v = pow(dot(p,p) - ss, 1.0/16.0);
	
	return mix(0.3 + 0.2 * (1.0 - (s / 0.02)), 1.0, v);
}

// @param[default=15.0, min=0.0, max=30.0] FREQUENCY

void mainImage( in float FREQUENCY, in std::Texture2d Texture, out vec4 Return )
{
    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();
    vec2 uv;
	uv = fragCoord.xy / iResolution.xy;
	
 
		
		// Set frequency of global effect to 15 variations per second
		float t = float(int(iTime * FREQUENCY));
		
		// Get some image movement
		vec2 suv = uv + 0.002 * vec2( rand(t), rand(t + 23.0));
		
		// Get the image
		vec3 image = Texture.sample(vec2(suv.x, suv.y)).xyz;
		
		#ifdef BLACK_AND_WHITE
		// Convert it to B/W
		float luma = dot( vec3(0.2126, 0.7152, 0.0722), image );
		vec3 oldImage = luma * vec3(0.7, 0.7, 0.7);
		#else
		vec3 oldImage = image;
		#endif
		
		// Create a time-varying vignetting effect
		float vI = 16.0 * (uv.x * (1.0-uv.x) * uv.y * (1.0-uv.y));
		vI *= mix( 0.7, 1.0, rand(t + 0.5));
		
		// Add additive flicker
		vI += 1.0 + 0.4 * rand(t+8.);
		
		// Add a fixed vignetting (independent of the flicker)
		vI *= pow(16.0 * uv.x * (1.0-uv.x) * uv.y * (1.0-uv.y), 0.4);
		
		// Add some random lines (and some multiplicative flicker. Oh well.)
		#ifdef LINES_AND_FLICKER
		float l = float(8.0 * rand(t+7.0));
		
		if ( 0.0 < l ) vI *= randomLine( t+6.0+17.0 * float(0.0));
		if ( 1.0 < l ) vI *= randomLine( t+6.0+17.0 * float(1.0));
		if ( 2.0 < l ) vI *= randomLine( t+6.0+17.0 * float(2.0));		
		if ( 3.0 < l ) vI *= randomLine( t+6.0+17.0 * float(3.0));
		if ( 4.0 < l ) vI *= randomLine( t+6.0+17.0 * float(4.0));
		if ( 5.0 < l ) vI *= randomLine( t+6.0+17.0 * float(5.0));
		if ( 6.0 < l ) vI *= randomLine( t+6.0+17.0 * float(6.0));
		if ( 7.0 < l ) vI *= randomLine( t+6.0+17.0 * float(7.0));
		
		#endif
		
		// Add some random blotches.
		#ifdef BLOTCHES
		float s = float( max(8.0 * rand(t+18.0) -2.0, 0.0 ));

		if ( 0.0 < s ) vI *= randomBlotch( t+6.0+19.* float(0.0));
		if ( 1.0 < s ) vI *= randomBlotch( t+6.0+19.* float(1.0));
		if ( 2.0 < s ) vI *= randomBlotch( t+6.0+19.* float(2.0));
		if ( 3.0 < s ) vI *= randomBlotch( t+6.0+19.* float(3.0));
		if ( 4.0 < s ) vI *= randomBlotch( t+6.0+19.* float(4.0));
		if ( 5.0 < s ) vI *= randomBlotch( t+6.0+19.* float(5.0));
	
		#endif
	
		// Show the image modulated by the defects
        Return = vec4(oldImage * vI, 1.0);
		
		// Add some grain (thanks, Jose!)
		#ifdef GRAIN
        Return *= vec4((1.0+(rand(uv+t*.01)-.2)*.15, 1.0));		
        #endif		
		
}