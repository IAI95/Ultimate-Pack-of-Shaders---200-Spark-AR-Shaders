precision highp float;

// @param[default=40.0, min=2.0, max=100.0] Size

void mainImage( in float Size, in std::Texture2d Texture, out vec4 Return ) 
{
  vec2 iResolution = std::getRenderTargetSize();
  vec2 u = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
  float iTime = std::getTime();

  #define lum(pix) dot( pix, vec4(.3,.59,.11,0) )  //luminance
  #define T(x,y)   Texture.sample( uv2 + vec2(x,y) )    

    vec2 R = iResolution.xy,
         U = u / Size,
       div = Size / R,
       uv2 = floor(U)*div,
      diff = fract(U);
	
    //checkerboard pattern : half of the pixels are not changed
    if (fract( dot(floor(U),vec2(.5)) ) < .5) 
        { Return = T(0,0); return; }

    vec4 pix[4];
    pix[0] = vec4(T( 0, div.y));
    pix[1] = vec4(T( div.x, 0));
    pix[2] = vec4(T( 0, -div.y));
    pix[3] = vec4(T(-div.x, 0));

    //where is the biggest contrast ?   
    int comp = int (  abs( lum(pix[0]) - lum(pix[2]) )
                    > abs( lum(pix[1]) - lum(pix[3]) ) );
    vec2   d = abs(diff-.5) - vec2(1-comp,comp); // offset = 0,1 or 1,0
    ivec2  v = ivec2( vec2(3.5,2.5) - diff*2. );
   
    Return = dot(d,d) < .5 
        ? pix[ v[comp] ]                                 // 2 circles on the borders
        : mix( pix[comp+2], pix[comp] , diff[1-comp] );  // a gradient in between        
}