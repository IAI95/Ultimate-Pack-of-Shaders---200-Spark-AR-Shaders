precision highp float;

const vec4 skycolour1 = vec4(0.2, 0.4, 0.6, 1.0);
const vec4 skycolour2 = vec4(0.4, 0.7, 1.0, 1.0);

const mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );

vec2 hash( vec2 p ) {
	p = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));
	return -1.0 + 2.0*fract(sin(p)*43758.5453123);
}

float noise( in vec2 p ) {
    const float K1 = 0.366025404; // (sqrt(3)-1)/2;
    const float K2 = 0.211324865; // (3-sqrt(3))/6;
	vec2 i = floor(p + (p.x+p.y)*K1);	
    vec2 a = p - i + (i.x+i.y)*K2;
    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0); //vec2 of = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));
    vec2 b = a - o + K2;
	vec2 c = a - 1.0 + 2.0*K2;
    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );
	vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));
    return dot(n, vec3(70.0));	
}

float fbm(vec2 n) {
	float total = 0.0, amplitude = 0.1;
	for (int i = 0; i < 7; i++) {
		total += noise(n) * amplitude;
		n = m * n;
		amplitude *= 0.4;
	}
	return total;
}

// -----------------------------------------------

// @param[default=1.5, min=0.0, max=5.0] CloudScale
// @param[default=0.03, min=0.0, max=0.5] Speed
// @param[default=0.5555, min=0.5555, max=3.0] CloudDark
// @param[default=0.55, min=0.55, max=3.0] CloudLight
// @param[default=0.05, min=0.05, max=3.0] CloudCover
// @param[default=4.1, min=0.0, max=15.0] CloudAlpha
// @param[default=0.3, min=0.0, max=3.0] SkyTint

void mainImage( in float CloudScale, in float Speed, in float CloudDark, in float CloudLight, in float CloudCover, in float CloudAlpha, in float SkyTint, in std::Texture2d Texture, out vec4 Return )
{
    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();

    vec2 p = fragCoord.xy / iResolution.xy;
	vec2 uv = p*vec2(iResolution.x/iResolution.y,1.0);    
    float time = iTime * Speed;
    float q = fbm(uv * CloudScale * 0.5);
    vec4 textureMap = Texture.sample(p);
    
    //ridged noise shape
	float r = 0.0;
	uv *= CloudScale;
    uv += q - time;
    float weight = 0.8;
    for (int i=0; i<8; i++){
		r += abs(weight*noise( uv ));
        uv = m*uv - (time*0.9);
		weight *= 0.7;
    }
    
    //noise shape
	float f = 0.0;
    uv = p*vec2(iResolution.x/iResolution.y,1.0);
	uv *= CloudScale;
    uv += q - time;
    weight = 0.7;
    for (int i=0; i<8; i++){
		f += weight*noise( uv );
        uv = m*uv - (time*0.9);
		weight *= 0.6;
    }
    
    f *= r + f;
    
    //noise colour
    float c = 0.0;
    time = iTime * Speed * 2.0;
    uv = p*vec2(iResolution.x/iResolution.y,1.0);
	uv *= CloudScale*2.0;
    uv += q - time;
    weight = 0.4;
    for (int i=0; i<7; i++){
		c += weight*noise( uv );
        uv = m*uv - (time*0.9);
		weight *= 0.6;
    }
    
    //noise ridge colour
    float c1 = 0.0;
    time = iTime * Speed * 3.0;
    uv = p*vec2(iResolution.x/iResolution.y,1.0);
	uv *= CloudScale*3.0;
    uv += q - time;
    weight = 0.4;
    for (int i=0; i<7; i++){
		c1 += abs(weight*noise( uv ));
        uv = m*uv - (time*0.9);
		weight *= 0.6;
    }
	
    c += c1;
    
    vec4 skycolour = mix(skycolour2, skycolour1, p.y);
    vec3 texVec3 = vec3(textureMap.x, textureMap.y, textureMap.z);
    vec3 texColour = mix(texVec3, texVec3, p.y);
    vec3 cloudcolour = vec3(1.1, 1.1, 0.9) * clamp((CloudDark + CloudLight*c), 0.0, 1.0);
   
    f = CloudCover + CloudAlpha*f*r;
    
    vec3 result = mix(texColour, clamp(SkyTint * texColour + cloudcolour, 0.0, 1.0), clamp(f + c, 0.0, 1.0));
    
	Return = vec4( result, 1.0 );
}