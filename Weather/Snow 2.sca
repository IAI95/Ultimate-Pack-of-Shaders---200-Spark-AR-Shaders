/*
*算法来自：https://blog.csdn.net/tjw02241035621611/article/details/80047566
*algorithm from https://blog.csdn.net/tjw02241035621611/article/details/80047566
*/

precision highp float;

#define HASHSCALE1 .1031
#define HASHSCALE3 vec3(.1031, .1030, .0973)
#define HASHSCALE4 vec3(.1031, .1030, .0973, .1099)

float Hash11(float p)
{
	vec3 p3  = fract(vec3(p) * HASHSCALE1);
    p3 += dot(p3, p3.yzx + 19.19);
    return fract((p3.x + p3.y) * p3.z); 
}

vec2 Hash22(vec2 p)
{
	vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);
    p3 += dot(p3, p3.yzx+19.19);
    return fract((p3.xx+p3.yz)*p3.zy);
}


vec2 Rand22(vec2 co)
{
    float x = fract(sin(dot(co.xy ,vec2(122.9898,783.233))) * 43758.5453);
    float y = fract(sin(dot(co.xy ,vec2(457.6537,537.2793))) * 37573.5913);
    return vec2(x,y);
}

vec3 SnowSingleLayer(vec2 uv, float layer, float Size, float XSpeed, float YSpeed)
{
    
    vec3 acc = vec3(0.0,0.0,0.0);//让雪花的大小变化


    vec2 iResolution = std::getRenderTargetSize();
    float iTime = std::getTime();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));


                uv = uv * (2.0+layer);//透视视野变大效果
                float xOffset = uv.y * (((Hash11(layer)*2.-1.)*0.5+1.)*XSpeed);//增加x轴移动
                float yOffset = (YSpeed*iTime);//y轴下落过程
                uv += vec2(xOffset,yOffset);
                vec2 rgrid = Hash22(floor(uv)+(31.1759*layer));
                uv = fract(uv);
                uv -= (rgrid*2.-1.0) * 0.35;
                uv -=0.5;
                float r = length(uv);
                //让大小变化点
                float circleSize = 0.05*(1.0+0.3*sin(iTime*Size));
                float val = smoothstep(circleSize,-circleSize,r);
                vec3 col = vec3(val,val,val)* rgrid.x ;
                return col;
}

// @param[default=0.1, min=0.0, max=1.0] Size
// @param[default=0.2, min=0.0, max=1.0] XSpeed
// @param[default=0.5, min=0.0, max=1.0] YSpeed
// @param[default=10.0, min=0.0, max=50.0] Layers

void mainImage( in float Size, in float XSpeed, in float YSpeed, in float Layers, out vec4 Return )
{
    // Normalized pixel coordinates (from 0 to 1)

    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    vec2 iResolution = std::getRenderTargetSize();

    vec2 uv = 1.0 - fragCoord/iResolution.xy;

    uv *= vec2(iResolution.x/iResolution.y, 1.0);
    
    vec3 acc = vec3(0,0,0);
    for (float i=0.;i<Layers;i++) 
    {
        acc += SnowSingleLayer(uv, i, Size, XSpeed, YSpeed); 
    }

    // Output to screen
    Return = vec4(acc,1.0);
}