// Copyright (c) 2013 Andrew Baldwin (twitter: baldand, www: http://thndl.com)
// License = Attribution-NonCommercial-ShareAlike (http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US)

// "Just snow"
// Simple (but not cheap) snow made from multiple parallax Layer with randomly positioned 
// flakes and directions. Also includes a DoF effect. Pan around with mouse.

precision highp float;

// @param[default=50, min=0, max=200] Layer
// @param[default=0.5, min=0.0, max=2.0] Depth
// @param[default=0.3, min=0.0, max=2.0] Width
// @param[default=0.6, min=0.0, max=2.0] Speed

void mainImage( in int Layer, in float Depth, in float Width, in float Speed, out vec4 LightSnow, out vec4 Blizzard )
{

    vec2 iResolution = std::getRenderTargetSize();
    float iTime = std::getTime();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));

	const mat3 p = mat3(13.323122,23.5112,21.71123,21.1212,28.7312,11.9312,21.8112,14.7212,61.3934);
	vec2 uv =  + vec2(1.0, iResolution.y/iResolution.x) * 1.0 - fragCoord.xy / iResolution.xy;
	vec3 acc = vec3(0.0);
	float dof = 5.*sin(iTime*.1);
	for (int i=0;i<Layer;i++) 
	{
		float fi = float(i);
		vec2 q = uv*(1.+fi*Depth);
		q += vec2(q.y*(Width*mod(fi*7.238917,1.)-Width*.5),Speed*iTime/(1.+fi*Depth*.03));
		vec3 n = vec3(floor(q),31.189+fi);
		vec3 m = floor(n)*.00001 + fract(n);
		vec3 mp = (31415.9+m)/fract(p*m);
		vec3 r = fract(mp);
		vec2 s = abs(mod(q,1.)-.5+.9*r.xy-.45);
		s += .01*abs(2.*fract(10.*q.yx)-1.); 
		float d = .6*max(s.x-s.y,s.x+s.y)+max(s.x,s.y)-.01;
		float edge = .005+.05*min(.5*abs(fi-5.-dof),1.);
		acc += vec3(smoothstep(edge,-edge,d)*(r.x/(1.+.02*fi*Depth)));
	}
	    LightSnow = vec4(vec3(acc),1.0);

		///////////////////////////////////////////////////////////////////////////////////

        #define Layer2 200 
        #define Depth2 .1
        #define Width2 .8
        #define Speed2 1.5

		vec3 acc2 = vec3(0.0);
		float dof2 = 5.*sin(iTime*.1);
		for (int i=0;i<Layer2;i++) 
		{
			float fi = float(i);
			vec2 q = uv*(1.+fi*Depth2);
			q += vec2(q.y*(Width2*mod(fi*7.238917,1.)-Width2*.5),Speed2*iTime/(1.+fi*Depth2*.03));
			vec3 n = vec3(floor(q),31.189+fi);
			vec3 m = floor(n)*.00001 + fract(n);
			vec3 mp = (31415.9+m)/fract(p*m);
			vec3 r = fract(mp);
			vec2 s = abs(mod(q,1.)-.5+.9*r.xy-.45);
			s += .01*abs(2.*fract(10.*q.yx)-1.); 
			float d = .6*max(s.x-s.y,s.x+s.y)+max(s.x,s.y)-.01;
			float edge = .005+.05*min(.5*abs(fi-5.-dof2),1.);
			acc2 += vec3(smoothstep(edge,-edge,d)*(r.x/(1.+.02*fi*Depth2)));
		}
		    Blizzard = vec4(vec3(acc2),1.0);

}