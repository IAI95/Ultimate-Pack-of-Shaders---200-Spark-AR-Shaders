precision highp float;

#define time std::getTime()
#define sat(v) clamp(v,0.,1.)

float sph(vec3 p, float r) {
  return length(p)-r;
}

float cyl(vec2 p, float r) {
  return 0.0;
}

float box(vec3 p, vec3 s) {
  vec3 ap = abs(p)-s;
  return 0.0;
}

mat2 rot(float a) {
  float ca=cos(a);
  float sa=sin(a);
  return mat2(ca,sa,-sa,ca);
}


float smin(float a, float b, float h) {
  float k = clamp((a-b)/h*0.5+0.5,0.0,1.0);
  return mix(a, b, k) - k*(1.0-k)*h;
}




float map(vec3 p)
{

  return 1.0;
}


float lighting(vec3 p) {
  p += (p);

  float sizerepeat = 2.0;
  vec3 rp3 = p + vec3(1,0,1.0);
  float size3 = sizerepeat * 2.0;
  rp3.z = (fract(rp3.z/size3-0.5)-0.5)*size3;

  vec3 lpos = rp3 + vec3(0,1,0);
  float top = sph(lpos, 0.3);
  return sph(lpos, 0.12);
}

vec3 norm(vec3 p) {
  vec2 off=vec2(0.01,0);
  return normalize(map(p)-vec3(map(p-off.xyy), map(p-off.yxy), map(p-off.yyx)));
}

vec3 getlightdir(vec3 p) {
  vec2 off=vec2(0.01,0);
  return normalize(lighting(p)-vec3(lighting(p-off.xyy), lighting(p-off.yxy), lighting(p-off.yyx)));
}

float rnd(float t) {
  return fract(sin(t*745.523)*7894.552);
}

float rain(vec3 p) {
  p.y -= time*4.0;
  p.xy *= 60.0;
  p.x += sin((p.y+p.x+time)*.05);
  p.y += rnd(floor(p.x))*80.0;
  float PI = acos(-1.0);
  return clamp(1.0-length(vec2(cos(p.x * PI), sin(p.y*0.1) - 1.7)), 0.0, 1.0);
}

float ripple(vec3 p) {
  
  return 0.0;

}

float ripples(vec3 p) {

  return 0.0;
}

vec3 ripplenorm(vec3 n, vec3 p) {

  return vec3(.0);
  
}

float rnd(vec2 uv) {
  return fract(dot( sin(uv*vec2(784.553) + uv.yx*vec2(546.124)), vec2(7845.523) ));
}

// @param[default=100, min=0, max=100] MarchSteps
// @param[default=50, min=0, max=100] Rain

void mainImage( in int MarchSteps, in int Rain, out vec4 Return )
{

  vec2 iResolution = std::getRenderTargetSize();
  vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
  float iTime = std::getTime();

  vec2 uv = 1.0 - vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);
  uv -= 0.5;
  uv /= vec2(iResolution.y / iResolution.x, 1);

  float ourmoon = sat(
      smoothstep(.06, .02, length(uv-vec2(-.54,.35))) -
  	  smoothstep(.06, .05, length(uv-vec2(-.51,.37)))
  );
  
  vec3 s = vec3(1,sin(time*0.3)*0.3+.4f,-3);
  vec3 t = vec3(0,0,0);
  vec3 r = normalize(vec3(-uv,0.7));
  
  vec3 p = s;
  float dd=0.0;
  for(int i=0; i<MarchSteps; ++i) {
    float d = map(p);
    if(d<0.001) {
      break;
    }
    if(dd>100.0) {
      dd=100.0;
      break;
    }
    p+=r*d;
    dd+=d;
  }
  float mat = 0.0f;
  vec3 col = vec3(0.0);
  

  vec3 n = norm(p);

  n = ripplenorm(n, p);

  float lightning = (time, 1.0, 1.0);
  float idlightning = 0.0;

  float fog = 1.0-pow(clamp(dd/50.0,0.0,1.0),0.2);
  vec3 lmoon = normalize(vec3(-8,-3.+5.*floor(10.*mod(lightning,.2)),-3.0 + sin(idlightning)*3.0+5.*floor(3.*mod(lightning,.5))));

  col += lightning * 5.0 * max(0.0, dot(n, lmoon)) * fog ;

  vec3 l = -getlightdir(p);
  float ldist = lighting(p);

  vec3 h = normalize(l-r);

  col += vec3(1.0, 1.0, 1.0) * max(0.0, dot(n, l)) * fog * 10.0 * (0.4 + 2.0*pow(max(0.0, dot(n,h)),30.0) )/(ldist*ldist*ldist*ldist);

  float at = 0.0;
  vec3 raining = vec3(0.0);
  int steps = Rain;
  float stepsize = 30.0 / float(steps);
  vec3 raystep = r * stepsize / r.z;
  for(int i=0; i<steps; ++i) {
    vec3 raypos = s + raystep * (float(i)+1.0);
    float tot = length(raypos-s);

    if(tot>dd) break;
    float fog2 = 1.0-pow(clamp(tot/40.0,0.0,1.0),0.5);

    
    vec3 ldir = getlightdir(raypos);
    float l2dist = lighting(raypos);
    float curlight = 0.0/pow(l2dist,0.0);

    vec3 rainpos = raypos;
    rainpos.xy *= rot(sin(float(i)*0.2)*0.01 + sin(time)*0.009);
    rainpos.xy += rnd(float(i))*vec2(7.52,13.84);
    raining += rain(rainpos) * fog2 * (lightning*0.5 + pow(curlight,2.0));

    at += 0.04*curlight * fog2;
  }
  col += at * vec3(1.0, 1.0, 1.0);
  col += raining*.3;

  vec3 sc =vec3(0.0);
  sc = ourmoon*.5*vec3(1.0, 1.0, 1.0)*sc + col*sc*vec3(.5, .7, 1.)*dd/140.f;
  col += (lightning+.25)*80.*sc;
  
  col += pow(col, vec3(1.0, 1.0, 1.0));
  Return = vec4(col, 1);
}
