const vec4 FADE_COLOR = vec4(0.0f, 0.0f, 0.0f, 1.0f);
const float BUFFER = 2.0f;
const float SCALE_SPEED = 1.5f;

// @param[default=-2.0, min=-3.0, max=3.0] Speed

void mainImage( in float Speed, in std::Texture2d Texture, out vec4 Return )
{

    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();

    float onePixelScale = (iResolution.y - 1.0f) / iResolution.y;

    float time = mod(iTime * Speed, 1.0f / SCALE_SPEED + 1.0f + BUFFER * 2.0f);
    time = clamp(time- BUFFER, 0.0, 1.0f / SCALE_SPEED + 1.0f);
    
    float scaleTime = clamp(time * SCALE_SPEED, 0.0f, onePixelScale);
    float fadeTime = clamp(time - onePixelScale / SCALE_SPEED, 0.0f, 1.0f);
        
	vec2 uv = fragCoord.xy / iResolution.xy;
    vec2 scaledUV = vec2((uv.x - 0.5f) * (1.0f - scaleTime) + 0.5f, (uv.y - 0.5f) / (1.0f - scaleTime) + 0.5f);
    
	vec4 textureColor = Texture.sample(scaledUV) + vec4(scaleTime, scaleTime, scaleTime, 0);
    float fadeOutLevel = 1.0f - fadeTime;
    float cropPixel = min(clamp(sign(abs(scaleTime / 2.0f - 0.5) - abs(uv.y - 0.5f)), 0.0f, 1.0f), clamp(sign(1.0f - fadeTime - abs(uv.x - 0.5f)),0.0f, 1.0f));
    
    Return = mix(FADE_COLOR, mix(FADE_COLOR, textureColor, fadeOutLevel), cropPixel);
}