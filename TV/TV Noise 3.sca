precision highp float;

float noise(vec2 p, std::Texture2d tex12, float Snow)
{
  float iTime = std::getTime();
	float s = tex12.sample(vec2(1.,2.*cos(iTime))*iTime*8. + p*Snow).x;
	s *= s;
	return s;
}

float onOff(float a, float b, float c)
{
  float iTime = std::getTime();
	return step(c, sin(iTime + a*cos(iTime*b)));
}

float ramp(float y, float start, float end)
{
	float inside = step(start,y) - step(end,y);
	float fact = (y-start)/(end-start)*inside;
	return (1.-fact) * inside;
	
}

float stripes(vec2 uv, std::Texture2d tex12, float Snow)
{
  float iTime = std::getTime();
	float noi = noise(uv*vec2(0.5,1.) + vec2(1.,3.), tex12, Snow);
	return ramp(mod(uv.y*4. + iTime/2.+sin(iTime + sin(iTime*0.63)),1.),0.5,0.6)*noi;
}

vec3 getVideo(vec2 uv, std::Texture2d Texture)
{
  float iTime = std::getTime();
	vec2 look = uv;
	float window = 1./(1.+20.*(look.y-mod(iTime/4.,1.))*(look.y-mod(iTime/4.,1.)));
	look.x = look.x + sin(look.y*10. + iTime)/50.*onOff(4.,4.,.3)*(1.+cos(iTime*80.))*window;
	float vShift = 0.4*onOff(2.,3.,.9)*(sin(iTime)*sin(iTime*20.) + (0.5 + 0.1*sin(iTime*200.)*cos(iTime)));
	look.y = mod(look.y + vShift, 1.);
	vec3 video = vec3(Texture.sample(look));
	return video;
}

vec2 screenDistort(vec2 uv)
{
	uv -= vec2(.5,.5);
	uv = uv*1.2*(1./1.2+2.*uv.x*uv.x*uv.y*uv.y);
	uv += vec2(.5,.5);
	return uv;
}

// @param[default=3.0, min=0.2, max=6.0] Snow

void mainImage( in float Snow, in std::Texture2d tex12, in std::Texture2d Texture, out vec4 Return )
{

  vec2 iResolution = std::getRenderTargetSize();
  vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
  float iTime = std::getTime();


	vec2 uv = 1.0-fragCoord.xy / iResolution.xy;
	//uv = screenDistort(uv);
	vec3 video = getVideo(1.-uv, Texture);
	float vigAmt = 3.+.3*sin(iTime + 5.*cos(iTime*5.));
	float vignette = (1.-vigAmt*(uv.y-.5)*(uv.y-.5))*(1.-vigAmt*(uv.x-.5)*(uv.x-.5));
	
	video += stripes(uv, tex12, Snow);
	video += noise((uv*2.0)/2.0 , tex12, Snow);
	video *= vignette;
	video *= (12.+mod(uv.y*30.+iTime,1.))/13.;
	
	Return = vec4(video,1.0);
}