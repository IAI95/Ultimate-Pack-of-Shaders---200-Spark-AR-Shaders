precision highp float;

float rand(vec2 co)
{
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

float verticalBar(float pos, float uvY, float offset, float Range)
{

    float edge0 = (pos - Range);
    float edge1 = (pos + Range);

    float x = smoothstep(edge0, pos, uvY) * offset;
    x -= smoothstep(pos, edge1, uvY) * offset;
    return x;
}

// @param[default=0.05, min=0.0, max=0.5] Range
// @param[default=250.0, min=0.0, max=500.0] NoiseQuality
// @param[default=0.0088, min=0.0, max=0.05] NoiseIntensity
// @param[default=0.02, min=0.0, max=0.5] OffsetIntensity
// @param[default=1.3, min=0.0, max=5.0] ColorOffsetIntensity

void mainImage( in float Range, in float NoiseQuality, in float NoiseIntensity, in float OffsetIntensity, in float ColorOffsetIntensity, in std::Texture2d Texture, out vec4 Return )
{
    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();

	vec2 uv = fragCoord.xy / iResolution.xy;
    
    for (float i = 0.0; i < 0.71; i += 0.1313)
    {
        float d = mod(iTime * i, 1.7);
        float o = sin(1.0 - tan(iTime * 0.24 * i));
    	o *= OffsetIntensity;
        uv.x += verticalBar(d, uv.y, o, Range);
    }
    
    float uvY = uv.y;
    uvY *= NoiseQuality;
    uvY = float(int(uvY)) * (1.0 / NoiseQuality);
    float noise = rand(vec2(iTime * 0.00001, uvY));
    uv.x += noise * NoiseIntensity;

    vec2 offsetR = vec2(0.006 * sin(iTime), 0.0) * ColorOffsetIntensity;
    vec2 offsetG = vec2(0.0073 * (cos(iTime * 0.97)), 0.0) * ColorOffsetIntensity;
    
    float r = Texture.sample(uv + offsetR).r;
    float g = Texture.sample(uv + offsetG).g;
    float b = Texture.sample(uv).b;

    vec4 tex = vec4(r, g, b, 1.0);
    Return = tex;
}