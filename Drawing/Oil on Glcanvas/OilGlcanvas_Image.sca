// created by florian berger (flockaroo) - 2018
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

// some relief lighting

#define Res  std::getRenderTargetSize()
#define Res1 std::getRenderTargetSize()
#define Res3 std::getRenderTargetSize()

vec4 getRand(vec2 pos, std::Texture2d tex16) 
{
    vec2 uv=pos/Res1;
    return tex16.sample(uv);
}

float getVal(vec2 uv, std::Texture2d BufferA, std::Texture2d tex16)
{
    vec2 iResolution = std::getRenderTargetSize();
	float r = getRand(uv*iResolution.xy*.02, tex16).x*2.-1.;
	r=0.*exp(-abs(r)/0.05);
	
    return mix(1.,
    //length(textureLod(BufferA,uv,1.7+.5*log2(iResolution.x/1920.)).xyz)
    length(BufferA.sampleLod(uv,2.5+.5*log2(iResolution.x/1920.)).xyz)*.6+
    length(BufferA.sampleLod(uv,1.5+.5*log2(iResolution.x/1920.)).xyz)*.3+
    length(BufferA.sampleLod(uv,.5+.5*log2(iResolution.x/1920.)).xyz)*.2
    ,1.-r);
}
    
vec2 getGrad(vec2 uv,float delta, std::Texture2d BufferA, std::Texture2d tex16)
{
    vec2 d=vec2(delta,0);
    return vec2(
        getVal(uv+d.xy, BufferA, tex16)-getVal(uv-d.xy, BufferA, tex16),
        getVal(uv+d.yx, BufferA, tex16)-getVal(uv-d.yx, BufferA, tex16)
    )/delta;
}

void mainImage( in std::Texture2d BufferA, in std::Texture2d tex16, out vec4 Return )
{
    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();

	vec2 uv = fragCoord/Res;
    vec3 n = vec3(getGrad(uv,1.0/iResolution.y, BufferA, tex16),150.0);
    //n *= n;
    n=normalize(n);
    Return=vec4(n,1);
    vec3 light = normalize(vec3(1,-1,.8));
    float diff=clamp(dot(n,light),0.,1.0);
    float spec=clamp(dot(reflect(light,n),vec3(0,0,-1)),0.0,1.0);
    spec=pow(spec,12.0)*.5;
    float sh=clamp(dot(reflect(light*vec3(-1,-1,1),n),vec3(0,0,-1)),0.0,1.0);
    sh=pow(sh,4.0)*.1;
    //spec=0.0;
	Return = BufferA.sample(uv)*mix(diff,1.,.8)+spec*vec4(.85,1.,1.15,1.)-sh*vec4(.85,1.,1.15,1.);
	Return.w=1.;
    
    if(true)
    {
        vec2 scc=(fragCoord-.5*iResolution.xy)/iResolution.y;
        float vign = 1.3-2.5*dot(scc,scc);
        vign*=1.-.8*exp(-sin(fragCoord.x/iResolution.x*3.1416)*20.);
        vign*=1.-.8*exp(-sin(fragCoord.y/iResolution.y*3.1416)*10.);
        Return.xyz *= vign;
    }
    
}

