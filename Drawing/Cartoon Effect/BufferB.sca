///outlines

vec3 samplef(int x, int y, vec2 res, std::Texture2d BufferC)
{
	return BufferC.sample(vec2(x,y)/res).xyz;
}

float lum(vec3 rgb)
{
	return (0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b);
}

void mainImage( in std::Texture2d BufferC, out vec4 Return )
{
    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();

	vec2 uv = fragCoord.xy / iResolution.xy;
    vec3 sx = vec3(0);
    vec3 sy = vec3(0);
    
    mat3 sobelX = mat3(-1.0, -2.0, -1.0,
    0.0,  0.0,  0.0,
    1.0,  2.0,  1.0);

    mat3 sobelY = mat3(-1.0,  0.0,  1.0,
    -2.0,  0.0,  2.0,
    -1.0,  0.0,  1.0);

    for(int i=0; i<=2; i++)
    {
        for(int j=0; j<=2; j++)
        {
        	sx += samplef(int(fragCoord.x)+i-1, int(fragCoord.y)+j-1, iResolution.xy, BufferC) * sobelX[i][j];
            sy += samplef(int(fragCoord.x)+i-1, int(fragCoord.y)+j-1, iResolution.xy, BufferC) * sobelY[i][j];
        }
    }
    float finalLum = pow(lum(sx*sx + sy*sy), 0.5);
    if(finalLum < 0.4){
        finalLum = smoothstep(0.0,1.0,finalLum);
    }
    else{
        finalLum = 1.0;
    }
	Return = vec4(vec3(1.0 - finalLum), 1.0);
}