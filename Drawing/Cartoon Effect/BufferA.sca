

vec3 rgb2hsv(vec3 c){
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);
    vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);
    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec3 stepColor(vec3 col)
{
    vec3 lumvals = vec3(0.2,0.7,0.9);

	vec3 hsv = rgb2hsv(col);
    if(hsv.z <= 0.33){
    	hsv.z = lumvals.x;
    }
    else if(hsv.z <= 0.67){
    	hsv.z = lumvals.y;
    }
    else{
    	hsv.z = lumvals.z;
    }
    return hsv2rgb(hsv);
}

void mainImage( in std::Texture2d BufferC, out vec4 Return )
{
    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();

	vec2 uv = fragCoord.xy / iResolution.xy;
    vec4 tex = BufferC.sample(uv);

	Return = vec4(stepColor(tex.rgb),1.0);
}