// created by florian berger (flockaroo) - 2018
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

// aquarelle with pencil predraw

// some gradient precalcs

precision highp float;

vec4 getCol(vec2 pos, float lod, std::Texture2d ByfferA)
{
    vec2 iResolution = std::getRenderTargetSize();
    vec2 tres = (ByfferA.size);

    vec2 tpos = (pos-.5*iResolution.xy)*min(tres.y/iResolution.y,tres.x/iResolution.x);
    vec2 uv = (tpos+tres*.5)/tres;

    vec2 mask = step(vec2(-.5),-abs(uv-.5));
    return ByfferA.sampleLod(uv,lod)*mask.x*mask.y;
}

float getVal(vec2 pos, float lod, std::Texture2d ByfferA)
{
    return dot(getCol(pos,lod, ByfferA).xyz,vec3(1)/3.);
}

vec2 getGrad(vec2 pos, float eps, float lod, std::Texture2d ByfferA)
{
    vec2 d=vec2(eps,0);
    return vec2(
        getVal(pos+d.xy,lod, ByfferA)-getVal(pos-d.xy,lod, ByfferA),
        getVal(pos+d.yx,lod, ByfferA)-getVal(pos-d.yx,lod, ByfferA)
        )/eps/2.;
}

vec2 getGradDiv(vec2 pos, float eps, float lod, std::Texture2d ByfferA)
{
    vec2 g=getGrad(pos,eps,lod, ByfferA);
    vec2 ng=normalize(g);
    vec2 g2=getGrad(pos+eps*ng,eps,lod, ByfferA);
    return ng*dot(g2-g,ng)/eps;
}

void mainImage( in std::Texture2d ByfferA, out vec4 Return )
{
    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();

    Return=vec4(0,0,0,0);
    float ssc = (vec2(ByfferA.size).x/800.);
    float sc=1.;
    for(int i=0;i<5;i++)
    {
        Return.xy += ssc * 20.* sc * getGradDiv(fragCoord, 1.5*sc, float(i)+log(ssc)/8.0, ByfferA ).xy;

        sc*=2.;
    }
    Return.zw=20.*getGrad(fragCoord,1.5,0., ByfferA).xy*ssc;

}

