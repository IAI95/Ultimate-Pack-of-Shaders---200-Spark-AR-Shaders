
// Original:
// NEON LOVE by alro - https://www.shadertoy.com/view/WdK3Dz

/* 
 * Fixed the creases in the heart caused by the property of the distance field on concave areas.
 * By converting the individual bezier SDF segments into light/glow first,
 * we can treat them as indiviual lights and sum them together.
 * This does make the endpoints to double in Intensity as they overlap,
 * so we subtract light on the endpoints to get the smooth lighting properly.
 *
 */

 precision highp float;

 #define POINT_COUNT 8

 //https://www.shadertoy.com/view/MlKcDD
 //Signed distance to a quadratic bezier
 float sdBezier(vec2 pos, vec2 A, vec2 B, vec2 C){    
     vec2 a = B - A;
     vec2 b = A - 2.0*B + C;
     vec2 c = a * 2.0;
     vec2 d = A - pos;
 
     float kk = 1.0 / dot(b,b);
     float kx = kk * dot(a,b);
     float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;
     float kz = kk * dot(d,a);      
 
     float res = 0.0;
 
     float p = ky - kx*kx;
     float p3 = p*p*p;
     float q = kx*(2.0*kx*kx - 3.0*ky) + kz;
     float h = q*q + 4.0*p3;
     
     if(h >= 0.0){ 
         h = sqrt(h);
         vec2 x = (vec2(h, -h) - q) / 2.0;
         vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));
         float t = uv.x + uv.y - kx;
         t = clamp( t, 0.0, 1.0 );
 
         // 1 root
         vec2 qos = d + (c + b*t)*t;
         res = length(qos);
     }else{
         float z = sqrt(-p);
         float v = acos( q/(p*z*2.0) ) / 3.0;
         float m = cos(v);
         float n = sin(v)*1.732050808;
         vec3 t = vec3(m + m, -n - m, n - m) * z - kx;
         t = clamp( t, 0.0, 1.0 );
 
         // 3 roots
         vec2 qos = d + (c + b*t.x)*t.x;
         float dis = dot(qos,qos);
         
         res = dis;
 
         qos = d + (c + b*t.y)*t.y;
         dis = dot(qos,qos);
         res = min(res,dis);
 
         qos = d + (c + b*t.z)*t.z;
         dis = dot(qos,qos);
         res = min(res,dis);
 
         res = sqrt( res );
     }
     
     return res;
 }
 
 
 //http://mathworld.wolfram.com/HeartCurve.html
 vec2 getHeartPosition(float t){
     return vec2(16.0 * sin(t) * sin(t) * sin(t),
                 -(13.0 * cos(t) - 5.0 * cos(2.0*t)
                 - 2.0 * cos(3.0*t) - cos(4.0*t)));
 }
 
 //https://www.shadertoy.com/view/3s3GDn
 float getGlow(float dist, float Radius, float Intensity){
     return pow(Radius*dist, Intensity);
 }
 
 // Changes in here
 float getSegment(float t, vec2 pos, float offset, float Len, float Speed, float Scale, float Thickness )
 {
   vec2 points[POINT_COUNT];
   for(int i = 0; i < POINT_COUNT; i++)
   {
         points[i] = getHeartPosition(offset + float(i)*Len + fract(Speed * t) * 6.28);
   }
     
     vec2 c = (points[0] + points[1]) / 2.0;
     vec2 c_prev;
   float light = 0.;
     const float eps = 1e-10;
     
     for(int i = 0; i < POINT_COUNT-1; i++)
     {

         //https://tinyurl.com/y2htbwkm
         c_prev = c;
         c = (points[i] + points[i+1]) / 2.0;
         // Distance from bezier segment
         float d = sdBezier(pos, Scale * c_prev, Scale * points[i], Scale * c);
         // Distance from endpoint (except from first point)
         float e = i > 0 ? distance(pos, Scale * c_prev) : 1000.;
         // Convert the distance to light and accumulate
         light += 1. / max(d - Thickness, eps);
         // Convert the endpoint as well and subtract
         light -= 1. / max(e - Thickness, eps);
     }
     
     return max(0.0, light);
 }

// @param[default=0.3, min=0.0, max=1.0] Speed
// @param[default=0.25, min=0.0, max=0.5] Len
// @param[default=0.016, min=0.0, max=0.03] Scale
// @param[default=0.9, min=0.0, max=5.0] Intensity
// @param[default=0.018, min=0.00001, max=0.3] Radius
// @param[default=0.005, min=0.0, max=0.1] Thickness
// @param[default=#FFFFFF45] Gamma
// @param[default=#FF0D4DFF] Color1
// @param[default=#1A66FFFF] Color2
 
 void mainImage( in float Speed, in float Len, in float Scale, in float Intensity, in float Radius, in float Thickness, in vec4 Gamma, in vec4 Color1, in vec4 Color2, out vec4 Return )
 {
 
     vec2 iResolution = std::getRenderTargetSize();
     vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
     float iTime = std::getTime();


     vec2 uv = 1.0 - (fragCoord/iResolution);
     float widthHeightRatio = iResolution.x/iResolution.y;
     vec2 centre = vec2(0.5, 0.5);
     vec2 pos = centre - uv;
     pos.y /= widthHeightRatio;
     //Shift upwards to centre heart
     pos.y += 0.03;
   
     float t = iTime;
     
     //Get first segment
     float dist = getSegment(t, pos, 0.0, Len, Speed, Scale, Thickness);
     float glow = getGlow(dist, Radius, Intensity);
     
     vec4 col = vec4(0.0);
     
     //White core
     //col += 10.0*vec3(smoothstep(0.006, 0.003, dist));
     //Pink glow
     col += glow * Color1;
     
     //Get second segment
     dist = getSegment(t, pos, 3.4, Len, Speed, Scale, Thickness);
     glow = getGlow(dist, Radius, Intensity);
     
     //White core
     //col += 10.0*vec3(smoothstep(0.006, 0.003, dist));
     //Blue glow
     col += glow * Color2;
         
     //Tone mapping
     col = 1.0 - exp(-col);
     
     //Gamma
     col = pow(col, Gamma);
 
     //Output to screen
     Return = vec4(col);
 }
