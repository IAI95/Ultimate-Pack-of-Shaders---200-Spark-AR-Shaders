float circle(vec2 pos, vec2 uv, float rad)
{
	return smoothstep(rad, rad - 0.1, length(pos - uv));
}

float ring(vec2 pos, vec2 uv, float rad)
{
    float length = length(pos - uv);
    return smoothstep(rad - 0.5, rad, length) * smoothstep(rad + 0.25, rad, length);
}

// @param[default=0.2, min=0.0, max=1.0] Size

void mainImage( in float Size, out vec4 Return )
{
    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();
    // Normalized pixel coordinates (from 0 to 1)

    vec2 uv = (vec2(1.0 - fragCoord.x, 1.0 - fragCoord.y) - 0.5 * vec2(1.0 - iResolution.x, 1.0 - iResolution.y)) / iResolution.y;
    vec4 col = vec4(0.9, 0.9, 0.9, 1.0);    
	
    col = vec4(0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)), 1.0);

    float size = sin(iTime) + sin(iTime * 2.0) + sin(iTime*5.0);
    size = abs(size) * 0.02 + Size;
    float c = circle(vec2(0, -1.05), vec2(uv.x, uv.y - sqrt(abs(uv.x) + 1.0)), size);
   
    float pulse = ring(vec2(0), uv, (iTime / 2.0 - floor(iTime * 0.5)) * 2.0);
    
    col += c * 2.0;
    col += pulse;
    col = vec4(col.r, col.g * (uv.x + 0.5), col.b * (uv.y + 0.5), col.a * 1.0 );
    // Output to screen
    Return = vec4(col);
}
