precision highp float;

#define col1 vec3(193.,41.,46.)/255.
#define col2 vec3(241.,211.,2.)/255.

vec2 ran(vec2 uv) {
    uv *= vec2(dot(uv,vec2(127.1,311.7)),dot(uv,vec2(227.1,521.7)) );
    return 1.0-fract(tan(cos(uv)*123.6)*3533.3)*fract(tan(cos(uv)*123.6)*3533.3);
}
vec2 pt(vec2 id) 
{
  float iTime = std::getTime();
  float t = iTime*2.0;
  return sin(t*(ran(id+.5)-0.5)+ran(id-20.1)*8.0)*0.5;
}

// @param[default=30.0, min=1.0, max=100.0] SIZE

void mainImage( in float SIZE, out vec4 fragColor )
{

    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();


    vec2 uv = (fragCoord-.5*iResolution.xx)/iResolution.y;
    vec2 off = iTime/vec2(50.,30.);
    uv += off;
    uv *= SIZE;
    
    vec2 gv = fract(uv)-.5;
    vec2 id = floor(uv);
    
    float mindist = 1e9;
    vec2 vorv;
    for(float i=-1.;i<=1.;i++) {
        for(float j=-1.;j<=1.;j++) { 
            vec2 offv = vec2(i,j);
            float dist = length(gv+pt(id+offv)-offv);
            if(dist<mindist){
                mindist = dist;
                vorv = (id+pt(id+offv)+offv)/SIZE-off;
            }
        }
    }
    
    vec3 col = mix(col1,col2,clamp(vorv.x*2.2+vorv.y,-1.,1.)*0.5+0.5);
    
    fragColor = vec4(col,1.0);
    
    /*
    fragColor += vec4(vec3(smoothstep(0.08,0.05,gv.x+pt(id).x)),0.0);
    fragColor -= vec4(vec3(smoothstep(0.05,0.03,gv.x+pt(id).x)),0.0);
	*/
}