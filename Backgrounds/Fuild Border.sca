/* ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * zlnimda (Nimda@zl) wrote this file.  As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return.
 * ----------------------------------------------------------------------------
 */

// The following functions has been borrowed from iq // Copyright Â© 2020 Inigo Quilez
// under MIT License

precision highp float;

float sdBox( in vec2 p, in vec2 b )
{
    vec2 d = abs(p)-b;
    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);
}

float hash(vec2 p)
{
    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));
    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );
}

float noise( in vec2 p )
{
    vec2 i = floor( p );
    vec2 f = fract( p );
	
	vec2 u = f*f*(3.0-2.0*f);

    return mix( mix( hash( i + vec2(0.0,0.0) ), 
                     hash( i + vec2(1.0,0.0) ), u.x),
                mix( hash( i + vec2(0.0,1.0) ), 
                     hash( i + vec2(1.0,1.0) ), u.x), u.y);
}
// END of MIT License 


float border(vec2 uv, float t, vec2 ratio)
{
    vec2 p = uv.yx + vec2(-1.f, 1.f) * sign(uv) * t;
    p *= 64.f;
    p = vec2(cos(p.x), sin(p.y));
    p *= 0.01f;
    uv += p;
    
    float d = sdBox(uv, ratio * 0.39);
    float v = smoothstep(0.01f, 0.f, d);
    
    return clamp(v, 0.f, 1.f);
}

float fuilds(vec2 uv, float t, vec2 ratio)
{
    vec2 p = uv;
    // p move over time
    float s = sin(t) * 0.5f, c = cos(t) * 0.5f;
    p += vec2(t - s + c, t + s - c);
    // p scaled
    p *= 16.f;
    
    // noise get from p
    float n = noise(p) * 16.0f;
    
    
    float d = sdBox(uv, ratio * 0.4);
    d = smoothstep(0.03f, 0.f, d);
    n *= d;
    
    n = pow(n, 6.f);
    
    return clamp(n, 0.f, 1.f);
}

float mask(vec2 uv, float t)
{
    vec2 iResolution = std::getRenderTargetSize();
    vec2 ratio = iResolution.xy/max(iResolution.x,iResolution.y);
    uv -= 0.5; // centered
    uv *= ratio; // keep aspect ratio

    float mask = 0.f;
    mask += border(uv, t, ratio);
    mask += fuilds(uv , t, ratio);
    
    return clamp(mask, 0.f, 1.f);
}

void mainImage( in std::Texture2d Texture, out vec4 Return )
{

    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();


    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = 1.0 - fragCoord.xy / iResolution.xy;

    float t = iTime * 0.15f;
    float mask = mask(uv, t);
    
    vec4 col = Texture.sample(uv);
    col.xyz *= mask;

    // Output to screen
    Return = vec4(col.xyz, 1.0);
}