// Common parameters:
#define SHAPE_SIZE 0.06
#define BLUR 0.001
#define VERTICAL_TRAVEL 0.1
#define SPEED_TRAVEL 0.6
#define SPEED_ROTATION 1.
#define ALPHA .7

// Colors
#define DARK_BLUE vec3(16./255.,50./255.,66./255.)
#define LIGHT_BLUE vec3(34./255.,76./255.,114./255.)
#define SHAPE_GRAY vec3(93./255.,119./255.,137./255.)

// Only applies to the circle and square
#define INNER_CUTOUT_SCALE 0.7

// NEW on Jul-24-2021: grid based rendering to improve performance
// the old way is pretty terrible in hindsight
#define NEW_RENDERER 1

// Old renderer parameter:
// set to an ammount similar to density 12 on the new renderer
// so you can see the performance improvement
// (at least I can see the difference on my 6 year old Macbook Air)
#define SHAPE_AMOUNT 300.

// New renderer parameters:
#define DENSITY 12.
// see the note in the main function
#define PRESERVE_VERTICAL_TRAVEL 1

// Helper functions grabbed from the internet
float rand(vec2 co) {
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233)))
        *43758.5453);
}

vec2 N22(vec2 p) {
    vec3 a = fract(p.xyx*vec3(123.34,234.34,345.65));
    a += dot(a, a+34.45);
    return fract(vec2(a.x*a.y,a.y*a.z));
}

// https://gist.github.com/companje/29408948f1e8be54dd5733a74ca49bb9
float map(float value, float min1, float max1,
        float min2, float max2) {
    return min2 + (value - min1)*(max2 -min2)
        /(max1 - min1);
}

mat2 rotate(float angle) {
    return mat2(cos(angle),-sin(angle),
        sin(angle),cos(angle));
}

// Background gradient
vec3 background(vec2 uv) {
    const float GRAD_START = 0.25, GRAD_STOP = 0.95;
    return mix(LIGHT_BLUE,DARK_BLUE,
        smoothstep(GRAD_START,GRAD_STOP,uv.y));
}

// Solid helper shapes
float box(vec2 uv, float left, float right,
        float down, float up, float blur) {
    return smoothstep(left,left+blur,uv.x)
        *smoothstep(right,right-blur,uv.x)
        *smoothstep(down,down+blur,uv.y)
        *smoothstep(up,up-blur,uv.y);
}

float box(vec2 uv, float lowerBound, float upperBound,
        float blur) {
    return box(uv,lowerBound,upperBound,
               lowerBound,upperBound,blur);
}

float triangleSolid(vec2 uv, float size, float height,
        float blur) {
    float sides = map(uv.y,-size/2.,height,size/2.,0.);
    return box(uv,-sides,sides,-size/2.,size/2.,blur);    
}

// Main shapes
float circle(vec2 uv, float size, float blur, float alpha) {
    float radius = size/2.;
    return alpha*(smoothstep(radius+blur,radius,length(uv))
        - smoothstep(INNER_CUTOUT_SCALE*radius+blur,
                     INNER_CUTOUT_SCALE*radius,
                     length(uv)));
}

float X(vec2 uv, float size, float blur, float alpha) {
    float lower = -size/2., upper = size/2.;
    return alpha*(box(uv,lower,upper,lower/5.,upper/5.,blur)
        + box(uv,lower/5.,upper/5.,lower,upper,blur)
        - box(uv,lower/5.,upper/5.,blur));
}

float triangle(vec2 uv, float size, float height,
        float blur, float alpha) {
    vec2 innerCoord = uv*2.;
    const float BASE_SIZE = 0.05, SCALING_FACTOR = 0.01;
    innerCoord.y += SHAPE_SIZE/BASE_SIZE*SCALING_FACTOR;
    return alpha*(triangleSolid(uv,size,height,blur)
        - triangleSolid(innerCoord,size,height,blur));
}

float square(vec2 uv, float size, float blur, float alpha) {
    return alpha*(box(uv,-size/2.,size/2.,blur)
        - box(uv,-INNER_CUTOUT_SCALE*size/2.,
              INNER_CUTOUT_SCALE*size/2.,blur));
}

vec2 sway(vec2 uv, vec2 start, float vertTravel,
        float timeShift) {
			float iTime = std::getTime();
    return vec2(uv.x-start.x,uv.y-start.y
                - vertTravel*sin(SPEED_TRAVEL
                                 *iTime-timeShift));
}

void mainImage( out vec4 fragColor )
{
	vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();

    vec2 uv = fragCoord/iResolution.xy;
    float ASPECT_RATIO = iResolution.x/iResolution.y;
    uv.x *= ASPECT_RATIO;

    vec3 col = background(uv);
    
    #if NEW_RENDERER
    uv *= DENSITY;
    vec2 xy = fract(uv)-.5,  // point within a grid cell
         id = floor(uv),     // the grid cell we are in
         cid = vec2(0.);     // the id adjusted for the actual location of the cell
    
    /*
    Here we see which shapes are in this cell and the surrounding
    cells (the shapes nearby) and draw their value for this pixel.
    Unfortunately we cannot increase the shape density
    while maintaining the vertical travel of the shapes
    without having shapes from far-away grid cells "come into"
    our grid cell and not being being drawn since we only check
    nearby cells for shapes.
    This introduces clipping on the shapes which can only be fixed by
    increasing the number of neighboring grid cells checked
    per iteration, which unfortunately hurts performance.
    We already need slightly more vertical grid cells with the
    default settings because the shapes were already traveling
    too far.
    */
	
	float EQUILATERAL_HEIGHT = sqrt(pow(SHAPE_SIZE,2.) - pow(SHAPE_SIZE/2.,2.)) - SHAPE_SIZE/2.;

    #if PRESERVE_VERTICAL_TRAVEL
    // I did a quick check at density ~30 with default size
    // with these start/end values but they aren't perfect
    const vec2 startValue = vec2(-1.-DENSITY/30.,-2.-DENSITY/14.),
               endValue = vec2(1.+DENSITY/60.,1.+DENSITY/10.);
    #else
    const vec2 startValue = vec2(-1.,-2.),
               endValue = vec2(1.);
    #endif
    for(float yCell=startValue.y; yCell <= endValue.y; yCell++) {
        for(float xCell=startValue.x; xCell <= endValue.x; xCell++) {
            vec2 off = vec2(xCell,yCell);
            cid = id+off;
            vec2 origin = off+N22(cid);
            
            // big/random multipliers to spread out shape types
            float shapeID = 400.*rand(cid)+2.526*cid.y;
            
            origin = sway(origin,vec2(0.),
                          #if PRESERVE_VERTICAL_TRAVEL 
                          DENSITY*
                          #endif
                          VERTICAL_TRAVEL,shapeID);
            

            // rotate and scale the coordinate system for the shape
            // which we previously moved vertically based on time
            vec2 pointRotated = 1./DENSITY*(origin-xy)*rotate(sin(SPEED_ROTATION*iTime-shapeID));
            switch(int(mod(shapeID,4.))) 
			{
            case 0:
            default:
                col = mix(col,SHAPE_GRAY,
                          X(pointRotated,SHAPE_SIZE,BLUR,ALPHA));
                break;
            case 1:
                col = mix(col,SHAPE_GRAY,
                          circle(pointRotated,SHAPE_SIZE,BLUR,ALPHA));
                break;
            case 2:
                col = mix(col,SHAPE_GRAY,
                          triangle(pointRotated,SHAPE_SIZE,
                                   EQUILATERAL_HEIGHT,
                                   BLUR,ALPHA));
                break;
            case 3:
                col = mix(col,SHAPE_GRAY,
                          square(pointRotated,SHAPE_SIZE,BLUR,ALPHA));
                break;
            }
        }
    }
    #else
    for(float i = 0.; i < SHAPE_AMOUNT; i++) {
        vec2 seed = vec2(i,i);
        vec2 cord = vec2(rand(seed),rand(-.5*seed));
        cord.x *= ASPECT_RATIO;
        vec2 xy = sway(uv,cord,VERTICAL_TRAVEL,i);
        switch(int(mod(i,4.))) {
            case 0:
                xy *= rotate(sin(SPEED_ROTATION*iTime-i));
                col = mix(col,SHAPE_GRAY,
                          X(xy,SHAPE_SIZE,BLUR,ALPHA));
                break;
            case 1:
                col = mix(col,SHAPE_GRAY,
                          circle(xy,SHAPE_SIZE,BLUR,ALPHA));
                break;
            case 2:
                xy *= rotate(sin(SPEED_ROTATION*iTime-i));
                col = mix(col,SHAPE_GRAY,
                          triangle(xy,SHAPE_SIZE,
                                   EQUILATERAL_HEIGHT,
                                   BLUR,ALPHA));
                break;
            case 3:
            default:
                xy *= rotate(sin(SPEED_ROTATION*iTime-i));
                col = mix(col,SHAPE_GRAY,
                          square(xy,SHAPE_SIZE,BLUR,ALPHA));
                break;
        }
    }
    #endif
    
    fragColor = vec4(col,1.0);
}