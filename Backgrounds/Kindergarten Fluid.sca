precision highp float;

vec4 makeWave(vec2 uv, vec2 o, vec2 s, vec2 v, vec4 c1, vec4 c2, vec4 ch)
{
    float iTime = std::getTime();
    uv *= s;
    uv += o;
    float f = sin(uv.x+iTime * v.x) - uv.y - sin(iTime*v.y);
    vec4 c = vec4(0.);
    if (f > 10.)
    {
        c = c2;
    }
    else if (f > .0)
    {
        c = mix(c1, c2, f / 10.);
    }
    else if (f > -.2*s.y / 10.)
    {
        c = ch;
    }
	return c;
}

vec4 blend(vec4 c1, vec4 c2)
{
    return vec4(mix(c1.rgb, c2.rgb, c2.a), max(c1.a, c2.a)); 
}

float hash(float n)
{
    return fract(sin(n) * 123.456);
}

vec4 sun(vec2 uv, vec4 c1, vec4 c2, vec4 ch)
{
    float iTime = std::getTime();

    vec4 c = vec4(0.);
    float f = length(uv) * 2. -  sin(atan(uv.x, uv.y) / cos(.0) * 10. + iTime * 10.)/ 50.;
    if (f < 1.05 && f >= 1.)
    {
        c = ch;
    }
    else if (f < 1.)
    {
        c = mix(c1, c2, f);
    }
	return c;
}

void mainImage( out vec4 Return )
{
    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();

	vec2 uv = (3.0 * vec2(1.0 - fragCoord.x, 1.0 - fragCoord.y) -1.5 * vec2(1.0 - iResolution.x, 1.0 - iResolution.y)) / iResolution.y;
    //uv.y -= 0.5;
    //uv.x -= 0.3;
    vec4 bg = mix(vec4(.5, .6, .7, 1.), vec4(.2, .6, .9, 1.), clamp(uv.y, 0., 1.));
    
    bg = blend (bg, sun(uv, vec4(1., .4, .1, 1.), vec4(1., .7, .2, 1.), vec4(1.)));
    
    for (float i = .1; i <= 1.0; i += .1)
    {
    	bg = blend(bg, makeWave(
            uv,
            vec2(hash(i) * 10., i * 10.),
            vec2(10. * (1.25 - i), 10. / i),
            vec2( i*5. + hash(i), i*3.),
            vec4(.1, .3, .5, .5), vec4(.4, .8, 1., .6), vec4(1.)));
    }
    
    Return = bg;
}