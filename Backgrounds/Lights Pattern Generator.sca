//iq color palette

precision highp float;

vec3 pal(float t, vec3 a, vec3 b, vec3 c, vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}

// @param [default=0.0, min=1000.0, max=0.0] Zoom
// @param [default=0.0, min=0.0, max=1000.0] Lights

void mainImage( in float Zoom, in float Lights, out vec4 Return )
{
    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();

	vec2 uv = fragCoord.xy / iResolution.xy;
    uv = uv*2.-1.;
    uv.x*=iResolution.x/iResolution.y;
    
    float e = iTime*.125;
    float d = 128.*Lights/iResolution.x+8.5;
    
    float zoom = 4.+16.*Zoom/iResolution.y;
    vec2 g = uv*zoom;
    uv = d*(floor(g)+.5)/zoom;
    g = fract(g)*2.-1.;
    
    float f = dot(uv,uv)-e;
    
    vec3 c = vec3(pal( f*.5 + e,vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20)));
    
	Return = vec4(c*(1.-dot(g,g))*.2/abs((fract(f)-.5)*8.),1.0);//+ vec4(0.0, 0.0, 0.0, 1.0);
} 