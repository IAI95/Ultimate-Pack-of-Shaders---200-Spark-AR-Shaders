vec2 hash2(vec2 p ) {
  return fract(sin(vec2(dot(p, vec2(123.4, 748.6)), dot(p, vec2(547.3, 659.3))))*5232.85324);   
}

float hash(vec2 p) 
{
 return fract(sin(dot(p, vec2(43.232, 75.876)))*4526.3257);   
}


float f(vec2 p, std::Texture2d tex16) 
{
 float h = 0.0;
 float a = 0.5;
   for (int i = 0;i<3;i++) 
   {
     h+= tex16.sample(p).x*a; 
     p*=2.0;
     a*=0.5;
   }
 return sqrt(h);
}

vec3 stars(vec2 p) 
{
   vec2 n = floor(p);
   vec3 c = vec3(0.0);
   for (int i = -1;i<=1;i++) 
   {
       for (int j = -1;j<=1;j++) 
       {
           vec2 g = vec2(i, j);
           g += hash2(n+g)*0.5;
           c= mix(vec3(hash(n+g)),  c, smoothstep(0.039, 0.04, length(p-n+g)));
           
       }
   }
   return c;
}

void mainImage( in std::Texture2d tex16, out vec4 Return )
{
   vec2 iResolution = std::getRenderTargetSize();
   vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
   float iTime = std::getTime();
   float time = iTime*0.3;
   vec2 uv = 1.0 - (1.7 * fragCoord.xy - 0.36 * iResolution.yy) / iResolution.xy;
   uv.y -= 0.62;
   uv.x -= 0.0;
   vec3 col;
   float h = f(vec2(uv.x*0.01, 0.1+time*0.001), tex16);
   col = mix(vec3(0.0), vec3(1.0, 0.0, 1.0), smoothstep(0.018, 0.03, h-uv.y-1.0));
   float nh = mix(0.0, f( vec2(uv.x*0.02, time*0.001)*0.95+0.05 * f( vec2(uv.x*0.001, 0.5), tex16), tex16), (uv.x+1.0)*0.5);
   col = mix(col, mix(vec3(0.0), vec3(0.5, 0.0, 1.0), smoothstep(0.018, 0.03, nh-uv.y-1.0)), smoothstep(uv.y-0.01, uv.y, nh-1.));
   //sky
   vec3 sky = vec3(0.01, 0.01, 0.1);
   vec2 moon = vec2(sin(time)*1.2, cos(time)*1.5-1.0);//vec2(-0.5, 0.1)
   float l = length(uv*vec2((iResolution.x/iResolution.y)*2.0, 2.0)-moon);
   //stars
   sky = mix(sky, vec3(1.0, 1.0, 0.0), smoothstep(0.5, 1.0, stars((uv+vec2(time*0.1, time*0.3))*8.0)));
   //moon
   sky = mix(vec3(0.8+0.2*smoothstep(0.58, 0.61, f((uv-moon)*0.05, tex16))+smoothstep(0.15, 0.25, l)*0.2), sky, smoothstep(0.24, 0.25, l));
   //clouds 
   //sky = mix(sky, vec3(0.35, 0.0, 0.7), smoothstep(0.74+cos(time*0.2)*0.1, 0.75+cos(time*0.2)*0.1, f( (uv+vec2(time*0.1, time*0.01))*0.03*vec2(0.4, 1.0), tex16)));

   col = mix(sky, col, smoothstep(uv.y-1.01, uv.y-1.0, max(h, nh)-2.0));
   col = pow(col, vec3(0.45));
 Return = vec4(col,1.0);
}