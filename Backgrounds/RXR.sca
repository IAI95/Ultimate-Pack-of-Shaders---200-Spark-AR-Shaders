//RXR shader. 

// Some useful functions
vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }


//SCALE
mat2 scale(vec2 _scale){
    mat2 e = mat2(_scale.x,0.0,
                0.0,_scale.y); 
    return e;
}

//SNOISE
float snoise(vec2 v) {

    // Precompute values for skewed triangular grid
    const vec4 C = vec4(0.211324865405187,
                        // (3.0-sqrt(3.0))/6.0
                        0.366025403784439,
                        // 0.5*(sqrt(3.0)-1.0)
                        -0.577350269189626,
                        // -1.0 + 2.0 * C.x
                        0.024390243902439);
                        // 1.0 / 41.0

    // First corner (x0)
    vec2 i  = floor(v + dot(v, C.yy));
    vec2 x0 = v - i + dot(i, C.xx);

    // Other two corners (x1, x2)
    vec2 i1 = vec2(0.0);
    i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);
    vec2 x1 = x0.xy + C.xx - i1;
    vec2 x2 = x0.xy + C.zz;

    // Do some permutations to avoid
    // truncation effects in permutation
    i = mod289(i);
    vec3 p = permute(
            permute( i.y + vec3(0.0, i1.y, 1.0))
                + i.x + vec3(0.0, i1.x, 1.0 ));

    vec3 m = max(0.5 - vec3(
                        dot(x0,x0),
                        dot(x1,x1),
                        dot(x2,x2)
                        ), 0.0);

    m = m*m ;
    m = m*m ;

    // Gradients:
    //  41 pts uniformly over a line, mapped onto a diamond
    //  The ring size 17*17 = 289 is close to a multiple
    //      of 41 (41*7 = 287)

    vec3 x = 2.0 * fract(p * C.www) - 1.0;
    vec3 h = abs(x) - 0.5;
    vec3 ox = floor(x + 0.5);
    vec3 a0 = x - ox;

    // Normalise gradients implicitly by scaling m
    // Approximation of: m *= inversesqrt(a0*a0 + h*h);
    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);

    // Compute final noise value at P
    vec3 g = vec3(0.0);
    g.x  = a0.x  * x0.x  + h.x  * x0.y;
    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);
    return 130.0 * dot(m, g);
}

#define OCTAVES 4

// Ridged multifractal
// See "Texturing & Modeling, A Procedural Approach", Chapter 12
float ridge(float h, float offset) {
    h = abs(h);     // create creases
    h = offset - h; // invert so creases are at top
    h = h * h;      // sharpen creases
    return h;
}

float ridgedMF(vec2 p) {
    float lacunarity = 2.0;
    float gain = 0.5;
    float offset = 0.9;

    float sum = 0.0;
    float freq = 1.0, amp = 0.5;
    float prev = 1.0;
    for(int i=0; i < OCTAVES; i++) {
        float n = ridge(snoise(p*freq), offset);
        sum += n*amp;
        sum += n*amp*prev;  // scale by previous octave
        prev = n;
        freq *= lacunarity;
        amp *= gain;
    }
    return sum;
}
vec3 hsb2rgb( in vec3 c ){
    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),
                             6.0)-3.0)-1.0,
                     0.0,
                     1.0 );
    rgb = rgb*rgb*(3.0-2.0*rgb);
    return c.z * mix(vec3(1.0), rgb, c.y);
}

#define PI 3.14159265359

void mainImage( out vec4 Return )
{
    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();
    
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
	float time = iTime;
    
    //fixed aspect radio
    float fx = iResolution.x/iResolution.y;
    uv.x *= fx;
    
    vec2 p = vec2(0.5*fx,0.5) - uv;
    
    //define radius and angle
    float r = length(p);
    float a = atan(p.x,p.y);
    
    //Make a snoise
    float n = snoise(vec2(uv.x*100.,uv.y*100.+iTime)*0.002) ;
    
    //This is where the magic happens : A ridgedMF inside a ridgedMF
    float e = ridgedMF(vec2(0.5,0.5)
             *(ridgedMF(vec2(uv.x*0.8,uv.y*0.5-time*0.1)))
             +n
             *ridgedMF(vec2(uv.x*1.,uv.y+time*0.002)
             *ridgedMF(vec2(uv.x*0.5,uv.y*0.5+time*0.02))));
    
    
    //VERSION 2 :
    /*e = ridgedMF(vec2(uv.x*0.5*uv.y,uv.y*0.5)
             *(ridgedMF(vec2(uv.x*2.2,uv.y*2.0+time*0.01)))
             +n
             *ridgedMF(vec2(uv.x,uv.y)*ridgedMF(vec2(uv.x*0.5,uv.y*0.5-time*0.002))));
    */
    //simplify version : 
	//e = ridgedMF(vec2(ridgedMF(uv)));
    
    
    //Some colors: 
    vec3 col1 = vec3(0.1,0.1,0.4);
    vec3 col2 = vec3(0.5,0.8,1.-r);
 
    //mixing color1 and color2 with the pattern
    vec3 fin = mix(col1,col2,e);
         //fin = vec3(smoothstep(0.2,0.9,fin));
         //fin = hsb2rgb(vec3(e,1.0,1));
    
    Return = vec4(fin, 1.0);
}