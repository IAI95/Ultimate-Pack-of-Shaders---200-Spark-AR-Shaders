precision highp float;

void mainImage( in std::Texture2d tex11, in std::Texture2d Texture, out vec4 Return )
{

    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();

	vec2 uv = fragCoord.xy / iResolution.xy;
	vec2 block = floor(fragCoord.xy / vec2(16));
	vec2 uv_noise = block / vec2(64);
	uv_noise += floor(vec2(iTime) * vec2(1234.0, 3543.0)) / vec2(64);
	
	float block_thresh = pow(fract(iTime * 1236.0453), 4.0) * 0.2;
	float line_thresh = pow(fract(iTime * 2236.0453), 8.0) * 0.7;
	
	vec2 uv_r = uv, uv_g = uv, uv_b = uv;

	// glitch some blocks and lines
	if (tex11.sample(uv_noise).r < block_thresh || tex11.sample(vec2(uv_noise.y, 0.0)).g < line_thresh)
  {
		vec2 dist = (fract(uv_noise) - 0.5) * 0.3;
		uv_r += dist * 0.1;
		uv_g += dist * 0.2;
		uv_b += dist * 0.125;
	}

    Return = Texture.sample(uv);

	Return.r = Texture.sample(uv_r).r;
	Return.g = Texture.sample(uv_g).g;
	Return.b = Texture.sample(uv_b).b;

	// loose luma for some blocks
	if (tex11.sample(uv_noise).g < block_thresh)
		Return.rgb = Return.ggg;

	// discolor block lines
	if (tex11.sample(vec2(uv_noise.y, 0.0)).b * 3.5 < line_thresh)
		Return.rgb = vec3(0.0, dot(Return.rgb, vec3(1.0)), 0.0);

	// interleave lines in some blocks
	if (tex11.sample(uv_noise).g * 1.5 < block_thresh || tex11.sample(vec2(uv_noise.y, 0.0)).g * 2.5 < line_thresh)
  {
		float line = fract(fragCoord.y / 3.0);
		vec3 mask = vec3(3.0, 0.0, 0.0);
		if (line > 0.333)
			mask = vec3(0.0, 3.0, 0.0);
		if (line > 0.666)
			mask = vec3(0.0, 0.0, 3.0);
		
		Return.rgb *= mask;
	}
}
