precision highp float;

float hash( vec2 p )
{
    return fract(sin(dot(p,vec2(127.1,311.7)))*43758.5453123);     //Pseudo-random
} 
    float smoothNoise( in vec2 p)                                 //Bilinearly interpolated noise (4 samples)
    {
        vec2 i = floor( p ); vec2 f = fract( p );	
        vec2 u = f*f*(3.0-2.0*f);
        float a = hash( i + vec2(0.0,0.0) );
        float b = hash( i + vec2(1.0,0.0) );
        float c = hash( i + vec2(0.0,1.0) );
        float d = hash( i + vec2(1.0,1.0) );
        return float(a+(b-a)*u.x+(c-a)*u.y+(a-b-c+d)*u.x*u.y)/4.;
    }
    //Funciton to make the noise continuous while wrapping around angle 
    float rotatedMirror(float t, float r, float Mirror)
    {
        //t : 0->1
        t = fract(t+r);
        return 2.*abs(t-0.5)*Mirror;
    }
    //Some continous radial perlin noise

    const mat2 m2 = mat2(0.90,0.44,-0.44,0.90);

    float radialPerlinNoise(float t, float d, float Speed, float Mirror)
    {
        float iTime = std::getTime();
        const float BUMP_MAP_UV_SCALE = 44.2;
        d = pow(d,0.01); //Impression of Speed : stretch noise as the distance increases.
        float dOffset = -floor(iTime*Speed)*0.1; //Time drift (animation)
        vec2 p = vec2(rotatedMirror(t,0.1, Mirror),d+dOffset);
        float f1 = smoothNoise(p*BUMP_MAP_UV_SCALE);
        p = 2.1*vec2(rotatedMirror(t,0.4, Mirror),d+dOffset);
        float f2 = smoothNoise(p*BUMP_MAP_UV_SCALE);
        p = 3.7*vec2(rotatedMirror(t,0.8, Mirror),d+dOffset);
        float f3 = smoothNoise(p*BUMP_MAP_UV_SCALE);
        p = 5.8*vec2(rotatedMirror(t,0.0, Mirror),d+dOffset);
        float f4 = smoothNoise(p*BUMP_MAP_UV_SCALE);
        return (f1+0.5*f2+0.25*f3+0.125*f4)*3.;
    }
    //Colorize function (transforms BW Intensity to Color)
    vec4 Colorize(float f,vec2 uv,vec2 altereduv, std::Texture2d Texture, float Speed, vec4 Color, float Mirror)
    {
        
        float d = distance(vec2(0.5),uv.xy); //Squared distance
        float t = 0.1+atan(uv.y,uv.x)/4.28; //Normalized Angle
        float v = radialPerlinNoise(t,d,Speed,Mirror);
        //Saturate and offset values
        v = -2.5+v*5.;
        //Intersity ramp from center
        v = mix(0.,v,1.*smoothstep(0.1,10.,d));
        float pointDistanceFromCenter = distance(vec2(1.0),vec2(v));
       
        uv*=( smoothstep(0.,0.9,pointDistanceFromCenter));
      
        vec4 iPixel = Texture.sample(uv);
    
        f = clamp(f*.95,0.0,1.0);
        vec3 c = mix(iPixel.rgb, iPixel.rgb, f); //Red-Yellow Gradient
             c = mix(c, vec3(Color), f);      //While highlights
        vec3 cAttenuated = mix(vec3(0.0, 0.0, 0.0), c, f+1.);       //Intensity ramp
        return vec4(cAttenuated,1.0);
    }

    // @param[default=1.2, min=0.0, max=3.0] RaysSize
    // @param[default=1.0, min=0.0, max=3.0] Mirror
    // @param[default=-2.5, min=-5.0, max=5.0] Saturate
    // @param[default=10.0, min=0.0, max=20.0] Speed
    // @param[default=#E08211FF] Color

    void mainImage( in float RaysSize, in float Mirror, in float Saturate, in float Speed, in vec4 Color, in std::Texture2d Texture, out vec4 Return )
    {
        vec2 iResolution = std::getRenderTargetSize();
        vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
        float iTime = std::getTime();

        vec2 normaluv = fragCoord.xy/iResolution.xy;
        vec2 uv = RaysSize * (fragCoord -0.5 * vec2(iResolution.xy)) / iResolution.xy;
        float d = dot(uv,uv); //Squared distance
        float t = 0.1+atan(uv.y,uv.x)/4.28; //Normalized Angle
        float v = radialPerlinNoise(t,d,Speed, Mirror);
        //Saturate and offset values
        v = Saturate + v * 5.0;
        //Intersity ramp from center
        v = mix(0.,v,.8*smoothstep(0.1,0.65,d));
        //Colorize (palette remap )
        
        vec4 Colorized = Colorize(v,normaluv,uv,Texture,Speed,Color,Mirror);
    
        Return.rgba = Colorized;
    }