precision highp float; 
 
#import <Common.sca>

float ramp(in float a, in float b, in float x) 
{
    return clamp((x-a)/(b-a), 0.0, 1.0);
}

void mainImage( in std::Texture2d tex13, out vec4 fragColor )
{
    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();

    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = (4.0 * fragCoord - vec2(0.0, iResolution.y))/iResolution.x;
    
    uv.x = 1.5 * uv.x - 1.0;
    
    float along = uv.x;
    uv.x = mod(uv.x, 1.0);
    
    uv.y = clamp(uv.y, 0.0, 1.0);
    
    float tstep = mod(iTime, 16.0);
    tstep = tstep - mod(tstep, 1.0);
    
    const vec2 ostart = vec2(15.0 / 16.0, 11.0 / 16.0);
    const vec2 bstart = vec2(2.0 / 16.0, 11.0 / 16.0);
    const vec2 estart = vec2(5.0 / 16.0, 11.0 / 16.0);
    const vec2 ystart = vec2(9.0 / 16.0, 10.0 / 16.0);
    vec2 tstart = ostart;
    tstart = mix(tstart, bstart, step(1.0, along));
    tstart = mix(tstart, estart, step(2.0, along));
    tstart = mix(tstart, ystart, step(3.0, along));
    
    
    vec4 val = tex13.sample(tstart + uv / 16.0);
    
    const float scale = 1.0/256.0;
    float dist = val.r + scale * (val.g + scale*val.b);

    // Time varying pixel color
    vec3 col = clamp(4.0 * sin(0.7521 * iTime) - 3.0, 0.0, 1.0) * vec3(ramp(0.3  , 0.7, dist));

    // Output to screen
    fragColor = vec4(col, col.r);
}