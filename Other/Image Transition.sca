precision highp float;


vec2 mod2(vec2 p, float d) 
{
    float a = mod(p.x,d);
    float b = mod(p.y,d);
    return vec2(a,b);
}


vec3 laserTex(vec2 uv, vec2 mouse, float Thickness) 
{

    //uv*=0.1;
    vec3 col=vec3(0);
    vec3 barCol=vec3(0,1.0,1.0);
    float edgeCloseFactor = smoothstep(mouse.y-Thickness,mouse.y,uv.y);
    float barFactor = edgeCloseFactor* smoothstep(mouse.y+Thickness,mouse.y, uv.y);
    col=vec3(barFactor);
    return col;
    
}

vec3 laserTex2(vec2 uv, vec2 mouse, float Thickness)
{

    //uv*=0.1;
    vec3 col=vec3(0);
    vec3 barCol=vec3(0,1.0,1.0);
    float edgeCloseFactor = smoothstep(mouse.x-Thickness,mouse.x,uv.x);
    float barFactor = edgeCloseFactor* smoothstep(mouse.x+Thickness,mouse.x, uv.x);
    col=vec3(barFactor);
    return col;
    
}

vec3 laserComposition(vec2 uv, vec2 mouse, float Thickness) 
{

    vec3 laserMask = laserTex(uv,mouse,Thickness);
    vec3 laserCol = vec3(1.0, 0.5, 0.);
    return laserMask.x * laserCol *2.;
    //return laserMask;
    
}

vec3 laserComposition2(vec2 uv, vec2 mouse, float Thickness)
{

    vec3 laserMask = laserTex2(uv,mouse,Thickness);
    vec3 laserCol = vec3(1.0, 0.5, 0.);
    return laserMask.x * laserCol *2.;
}

vec2 hash( in vec2 x )  // replace this by something better
{
    const vec2 k = vec2( 0.3183099, 0.3678794 );
    x = x*k + k.yx;
    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );
}


// return gradient noise (in x) and its derivatives (in yz)
vec3 noised( in vec2 p )
{
    vec2 i = floor( p );
    vec2 f = fract( p );

#if 1
    // quintic interpolation
    vec2 u = f*f*f*(f*(f*6.0-15.0)+10.0);
    vec2 du = 30.0*f*f*(f*(f-2.0)+1.0);
#else
    // cubic interpolation
    vec2 u = f*f*(3.0-2.0*f);
    vec2 du = 6.0*f*(1.0-f);
#endif    
    
    vec2 ga = hash( i + vec2(0.0,0.0) );
    vec2 gb = hash( i + vec2(1.0,0.0) );
    vec2 gc = hash( i + vec2(0.0,1.0) );
    vec2 gd = hash( i + vec2(1.0,1.0) );
    
    float va = dot( ga, f - vec2(0.0,0.0) );
    float vb = dot( gb, f - vec2(1.0,0.0) );
    float vc = dot( gc, f - vec2(0.0,1.0) );
    float vd = dot( gd, f - vec2(1.0,1.0) );

    return vec3( va + u.x*(vb-va) + u.y*(vc-va) + u.x*u.y*(va-vb-vc+vd),   // value
                 ga + u.x*(gb-ga) + u.y*(gc-ga) + u.x*u.y*(ga-gb-gc+gd) +  // derivatives
                 du * (u.yx*(va-vb-vc+vd) + vec2(vb,vc) - va));
}

void Unity_GradientNoise_float(vec2 UV, float Scale, out float Out)
    {
       Out = noised(UV * Scale).x *0.5 + 0.5;
    }
       
void Unity_Multiply_float2_float2(vec2 A, vec2 B, out vec2 Out)
{
    Out = A * B;
}

void Unity_TilingAndOffset_float(vec2 UV, vec2 Tiling, vec2 Offset, out vec2 Out)
{
    Out = UV * Tiling + Offset;
}

void Unity_Lerp_float4(vec4 A, vec4 B, vec4 T, out vec4 Out)
{
    Out = mix(A, B, T);
}

// @param[default=0.1] DistortionAmount
// @param[default=5.0] Wave
// @param[default=0.015] Thickness
// @param[default=4.0] Speed

void mainImage( in float DistortionAmount, in float Wave, in float Thickness, in float Speed, in vec2 ScreenPan, in std::Texture2d Texture1, in std::Texture2d Texture2, out vec4 Vertical, out vec4 Horizontal )
{
    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();

    vec2 mouse = ScreenPan.xy / iResolution.xy;
    if(mouse.x < 0.01)
    {
    // init
        mouse.x = 0.5;
    }
    vec2 uv = fragCoord/iResolution.xy;
    float asp = iResolution.x / iResolution.x;
    // float asp = iResolution.y / iResolution.x;
    uv.x/=asp;
    mouse.x/=asp;

            vec2 timeF = vec2(0.0, 0.1);
            vec2 timeOffset = Speed * iTime * timeF;
            vec2 uvTiled;
            Unity_TilingAndOffset_float(uv, vec2 (1, 1), timeOffset, uvTiled);
            
    float gradientNoise;
    Unity_GradientNoise_float(uvTiled, Wave, gradientNoise);
    vec4 lerpedValue;
    Unity_Lerp_float4(vec4(uv,0.,0.), vec4(gradientNoise),vec4(DistortionAmount), lerpedValue);
    
    vec3 laserCol = laserComposition(lerpedValue.xy,mouse,Thickness);
    vec3 laserCol2 = laserComposition2(lerpedValue.xy,mouse,Thickness);

    vec3 col1=Texture1.sample(uv).xyz;
    vec3 col2=Texture2.sample(uv).xyz;

    vec3 col  = mix(col1,col2,step(mouse.y, lerpedValue.y));
    vec3 cols = mix(col1,col2,step(mouse.x, lerpedValue.x));

     col += laserCol;

     cols += laserCol2;

    Vertical   = vec4(col,1.0);
    Horizontal = vec4(cols,1.0);
}









