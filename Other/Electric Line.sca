precision highp float;

vec3 random3(vec3 c)
{
	float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
	vec3 r;
	r.z = fract(512.0*j);
	j *= .125;
	r.x = fract(512.0*j);
	j *= .125;
	r.y = fract(512.0*j);
	return r-0.5;
}

const float F3 =  0.3333333;
const float G3 =  0.1666667;

float simplex3d(vec3 p)
{
	 vec3 s = floor(p + dot(p, vec3(F3)));
	 vec3 x = p - s + dot(s, vec3(G3));
	 
	 vec3 e = step(vec3(0.0), x - x.yzx);
	 vec3 i1 = e*(1.0 - e.zxy);
	 vec3 i2 = 1.0 - e.zxy*(1.0 - e);
	 	
	 vec3 x1 = x - i1 + G3;
	 vec3 x2 = x - i2 + 2.0*G3;
	 vec3 x3 = x - 1.0 + 3.0*G3;
	 
	 vec4 w, d;
	 
	 w.x = dot(x, x);
	 w.y = dot(x1, x1);
	 w.z = dot(x2, x2);
	 w.w = dot(x3, x3);
	 
	 w = max(0.6 - w, 0.0);
	 
	 /* calculate surflet components */
	 d.x = dot(random3(s), x);
	 d.y = dot(random3(s + i1), x1);
	 d.z = dot(random3(s + i2), x2);
	 d.w = dot(random3(s + 1.0), x3);
	 
	 w *= w;
	 w *= w;
	 d *= w;
	 
	 return dot(d, vec4(52.0));
}

float noise(vec3 m)
{
    return   0.5333333*simplex3d(m) + 0.2666667*simplex3d(2.0*m) + 0.1333333*simplex3d(4.0*m) + 0.0666667*simplex3d(8.0*m);
}

// @param[default=0.3, min=0.0, max=1.0] Speed
// @param[default=2.0, min=0.5, max=2.0] Opacity
// @param[default=3.0, min=0.0, max=5.0] Strength_1
// @param[default=6.0, min=0.0, max=10.0] Strength_2
// @param[default=0.16, min=0.0, max=1.0] Line
// @param[default=0.18, min=0.0, max=1.0] Thickness

void mainImage( in float Speed, in float Opacity, in float Strength_1, in float Strength_2, in float Line, in float Thickness, out vec4 Return )
{
    
  vec2 iResolution = std::getRenderTargetSize();
  vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
  float iTime = std::getTime();

  vec2 uv = fragCoord.xy / iResolution.xy;  
  //  uv.y *= 1.5+0.5*sin(iTime);
  uv = uv * 2. -1.;  
 
  vec2 p = fragCoord.xy/iResolution.x;
  vec3 p3 = vec3(p, iTime*Speed);    
    
  float intensity = noise(vec3(p3*Strength_1+Strength_2));
                          
  float t = clamp((uv.x * -uv.x * Line) + 0.15, 0., 1.);                         
  float y = abs(intensity * -t + uv.y);//*sin(iTime);
    
  float g = pow(y, Thickness);
                          
  vec4 col = vec4(1.70, 1.48, 1.78, Opacity);
  col = col * -g + col;                    
  col = col * col;
  col = col * col;
                          
  Return = vec4(col);                            
}