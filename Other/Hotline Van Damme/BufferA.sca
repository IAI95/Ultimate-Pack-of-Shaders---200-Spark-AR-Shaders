precision highp float;

#define resdiv 2

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

float sobelVideo(vec2 fragCoord, std::Texture2d Texture)
{
    vec2 iResolution = std::getRenderTargetSize();

   	vec2 uv = fragCoord.xy / (iResolution.xy / vec2(resdiv));

    vec3 col;
    
    /*** Sobel kernels ***/
    // Note: GLSL's mat3 is COLUMN-major ->  mat3[col][row]
    mat3 sobelX = mat3(-1.0, -2.0, -1.0,
                       0.0,  0.0, 0.0,
                       1.0,  2.0,  1.0);
    mat3 sobelY = mat3(-1.0,  0.0,  1.0,
                       -2.0,  0.0, 2.0,
                       -1.0,  0.0,  1.0);  
    
    float sumX = 0.0;	// x-axis change
    float sumY = 0.0;	// y-axis change
    
    for(int i = -1; i <= 1; i++)
    {
        for(int j = -1; j <= 1; j++)
        {
            vec2 iResolution = std::getRenderTargetSize();
            // texture coordinates should be between 0.0 and 1.0
            float x = (fragCoord.x + float(i)) / (iResolution.x / float(resdiv));	
    		float y =  (fragCoord.y + float(j)) / (iResolution.y / float(resdiv));
            
            // Convolve kernels with image
            sumX += length(1.0-Texture.sample(vec2(x, y) ).xyz) * float(sobelX[1+i][1+j]);
            sumY += length(1.0-Texture.sample(vec2(x, y) ).xyz) * float(sobelY[1+i][1+j]);
        }
    }
    
    float g = abs(sumX) + abs(sumY);
    g = sqrt((sumX*sumX) + (sumY*sumY));
     
    
    if(g > 1.0)
        col = vec3(1.0,1.0,1.0);
    else
        col = col * 0.0;
    
	return col.x;
}




void mainImage( in std::Texture2d BufferA, in std::Texture2d tex10, in std::Texture2d Texture, out vec4 Return )
{

    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();


    vec2 uv = fragCoord.xy / iResolution.xy;

    float time = iTime * 0.4 + 0.1;
    
    float d;
            
    float redc = clamp(BufferA.sample(uv + (sin(time) * 0.0001 - 0.00005)).r, 0.0, 1.0);
    float greenc = clamp(BufferA.sample(uv + (-sin(time) * 0.0001 - 0.00005)).g, 0.0, 1.0);    
    float bluec = clamp(BufferA.sample(uv + (-cos(time) * 0.0001 - 0.00005)).b, 0.0, 1.0);    
    vec3 greenscreen = Texture.sample(uv).rgb;
    float alpha;    
        
    if (greenscreen.g > 0.5 && greenscreen.r < 0.2) 
    {
     alpha = 0.0;
    }
    else
    {
     alpha = 1.0;
    }
    
	vec3 c = 0.999 * vec3(redc,greenc,bluec);
    
    c = c * (0.8 + 0.2 * c);
    
    vec3 color = hsv2rgb( vec3(time*1.0, 0.3, fract(time) ) );

  
    d = sobelVideo(fragCoord.xy * (1.0/float(resdiv)), Texture);
        
	c = max(c, color * d );
        
    
    Return = vec4(c.rgb,alpha);
    
}
