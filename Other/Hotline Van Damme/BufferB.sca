precision highp float;

vec2 hash2seed(float seed)
{
    return fract(sin(vec2(seed+=0.1,seed+=0.1))*vec2(43758.5453123,22578.1459123));
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void mainImage( in std::Texture2d BufferA, in std::Texture2d BufferB, in std::Texture2d tex11, out vec4 Return )
{

    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();


    float time = iTime * 0.33; 
     vec2 uv = fragCoord.xy / iResolution.xy; 
     vec2 uv2 = uv + .04 *  (hash2seed(iTime) - 0.5) * sin(time);
   

     vec2 scalefx = vec2(sin(iTime), cos(1.0-iTime)) * 0.5 + 0.5;        
    float noise = tex11.sample( (uv+uv2*3.0) * 0.5 * scalefx + vec2(cos(iTime), sin(iTime))).r * 0.5;
    noise +=      tex11.sample( (uv+uv2*2.0) * 0.5 * scalefx + vec2(sin(iTime), cos(iTime))).r * 0.3;
    noise +=      tex11.sample( (uv+uv2*1.5) * 0.5 * scalefx - vec2(sin(iTime), sin(iTime))).r * 0.2;

    
    vec4 c = BufferA.sample( uv ).rgba;
    
     vec4 c2 = BufferA.sample( uv2 ).rgba;
    
	 vec3 bgcolor = mix( hsv2rgb( vec3(time+0.2,0.9,0.15)), hsv2rgb( vec3(time+0.1,0.6,sin(time) * 0.2 +0.1)), c.a  );
	c.rgb += bgcolor;    
    
    c += c2 * atan(time) * 0.5;

    
    
    noise = mix(noise, 1.0-noise, c.a);    
	c.rgb *= 0.7 + noise * 0.6;
    
     vec4 b = BufferB.sample( uv ).rgba;
    
    c = mix(b, c, 0.3);
    
    
    Return = c;
}