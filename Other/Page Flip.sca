precision highp float;

#define PI 3.14159265

vec4 fakeSpine(vec4 col, float t, float darken)
{
    return mix(col * darken, col, min(1.0,pow(abs(t - 0.5) * 30.0, 0.5)));
}

vec3 fakeNormal(float t, float center)
{
    t -= center;
    float interp =(1.0 - abs((t - 0.5) * 2.0)) * PI + PI * (3.0/4.0) ;
        
    vec3 normal = vec3(abs(sin(interp)) ,0,abs(cos(interp)));

    return mix(normal, vec3(0,0,1), min(1.0,pow(abs(t - 0.5) * 5.0, 0.5)));
}

vec4 specular(vec3 viewDir, vec3 normal, vec3 LightDirection, float SpecularShininess, vec4 SpecularColor, float SpecularPower )
{
    vec3 lightDir = normalize(LightDirection);
    float dist = length(lightDir);
    vec3 halfV = normalize(lightDir + normalize(viewDir));

    float NdotH = dot(normal, halfV);
    float intensity = pow(max(NdotH, 0.0), SpecularShininess);

    return intensity * SpecularColor * SpecularPower / dist; 
}

bool pageFlip(vec2 uv, vec2 mouse, vec2 topRight, inout vec2 sampleUV, inout vec3 normal, out float toHalfEdge)
{
    vec2 toEdge = topRight - mouse;
    vec2 toEdgeN = normalize(toEdge);
    
    vec2 toPixel = uv - mouse;
    
    vec2 diagonal = normalize(vec2(1.0));
    float cosT = dot(toEdgeN, diagonal);
    float cosT2 = 2.0 * cosT * cosT - 1.0;
    vec2 toEdgePerp = vec2(toEdgeN.y, -toEdgeN.x);
    
    float dir = sign(dot(toEdgePerp,diagonal));
    float sinT2 = dir * sqrt(1.0 - cosT2 * cosT2);
    
    vec2 nextPageUp = vec2(-sinT2, cosT2);
    vec2 nextPageRight = vec2(nextPageUp.y, -nextPageUp.x);
    
    if(dot(toPixel, nextPageUp) >= 0.0 && dot(toPixel, nextPageRight) >= 0.0)
    {
        vec2 halfPoint = mouse + toEdge * 0.5;
        vec2 toPixHP = uv - halfPoint;
        
        float proj = dot(toEdgePerp, (uv - halfPoint));
        vec2 projPoint = halfPoint + toEdgePerp * proj;
            
        float distDiff = distance(projPoint, uv) / distance(mouse, halfPoint);
        toHalfEdge = distDiff;
        
        if(dot(toPixHP, toEdge) < 0.0)
        {
            sampleUV = (sampleUV - mouse);
            sampleUV = vec2(sampleUV.y, -sampleUV.x);
            mat2 rot = mat2(cosT2, -sinT2, sinT2, cosT2); 
            sampleUV = rot * sampleUV;
            sampleUV.y *= -1.0;
            sampleUV.y = 1.0 - sampleUV.y;
            

            distDiff *= 0.5;
            normal = fakeNormal(distDiff, -0.43);
        }
        else
        {
            
            normal = fakeNormal(uv.x / topRight.x, 0.07);
        }

        return false;
    }
    
    return true;
}

// @param[default=vec4(0.1, 0.3, 0.9, 0.7)] BookBounds
// @param[default=vec3(5,3,1)] LightDirection
// @param[default=#FFFFFFFF] SpecularColor
// @param[default=16.0, min=0.0, max=30.0] SpecularShininess
// @param[default=10.0, min=0.0, max=20.0] SpecularPower

void mainImage( in vec4 BookBounds, in vec3 LightDirection, in vec2 ScreenPan, in vec4 SpecularColor, in float SpecularShininess, in float SpecularPower, in std::Texture2d Page1, in std::Texture2d Page2, out vec4 Return )
{
	vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();

    vec2 uv = fragCoord/iResolution.xy;

    vec4 bgCol = vec4(0.0);

    vec4 outCol = bgCol;
    
    vec2 bookUV = uv - BookBounds.xy;
    vec2 bookSize = vec2(BookBounds.zw - BookBounds.xy);
    bookUV /= bookSize;

    vec2 topRight = vec2(bookSize.y / bookSize.x, 1); 
    vec2 sUV = bookUV;
    sUV.x *= topRight.x;

    vec2 nMouse = ScreenPan.xy / iResolution.xy;
    nMouse -= BookBounds.xy;
    nMouse /= bookSize.xy;
    nMouse = clamp(nMouse, vec2(0.0),vec2(1.0));

    /*
    if(ScreenPan.z <= 0.0 && iTime > 0.0)
    {
        nMouse = vec2((sin(iTime + 0.3) + 1.0) * 0.5,(cos(iTime * 0.5) + 1.0) * 0.5);

    }
        nMouse.x *= topRight.x;
    */

    float radius = topRight.x * 0.5;
    vec2 spineTop = vec2(radius, 1.0);
    vec2 spineMouse = nMouse - spineTop;
    float len = length(spineMouse);
    nMouse = spineTop + normalize(spineMouse) * min(len, radius);

    vec2 sampleUV = sUV;

    vec3 normal = vec3(0,0,1);
    float halfEdgeDist = 1.0;
    bool firstPage = pageFlip(sUV, nMouse, topRight, sampleUV, normal, halfEdgeDist);

    sampleUV.x /= topRight.x;

    vec4 page1 = Page2.sample(sampleUV).xyzw;
    vec4 page2 = Page1.sample(sampleUV).xyzw;
    page1 = fakeSpine(page1,bookUV.x, 0.2);
    page2 = fakeSpine(page2,sampleUV.x, 0.2);
    page2 = fakeSpine(page2,  (1.0 -halfEdgeDist) * 0.5, 0.4);

    vec4 pageCol = firstPage ? page1 : page2;
 
    vec3 normal2 =  fakeNormal(bookUV.x > 0.5 ? bookUV.x : 1.0 - bookUV.x, 0.07);

    normal = firstPage ? normal2 : normal;

    normalize(normal);
    pageCol += vec4(min(vec4(1,1,1,1), specular(vec3(0,0,1), normal, LightDirection, SpecularShininess, SpecularColor, SpecularPower))) * 0.3;

    if(sampleUV.x >= 0.0 && sampleUV.x <= 1.0 && sampleUV.y >= 0.0 && sampleUV.y <= 1.0)
    {
        outCol = pageCol;
    }

    Return = vec4(outCol);
}