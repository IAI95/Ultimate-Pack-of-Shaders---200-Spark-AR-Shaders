// created by florian berger (flockaroo) - 2016
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

precision highp float;

vec3 getCol(vec2 fc, std::Texture2d BufferA)
{
    vec2 iResolution = std::getRenderTargetSize();
    return BufferA.sample(fc/iResolution.xy).xyz;
}

float getVal(vec2 fc, std::Texture2d BufferA)
{
    return dot(getCol(fc, BufferA),vec3(1./3.));
}
               
vec2 getGrad(vec2 fc, float eps, std::Texture2d BufferA)
{
    vec2 e=vec2(eps,0);
    return vec2(getVal(fc+e.xy, BufferA)-getVal(fc-e.xy, BufferA),
        		getVal(fc+e.yx, BufferA)-getVal(fc-e.yx, BufferA))/eps;
}

void mainImage( in std::Texture2d tex08, in std::Texture2d BufferA, out vec4 Return )
{
    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();

	vec2 uv = fragCoord.xy / iResolution.xy;
	vec3 t1 = tex08.sample(fragCoord.xy/iResolution).xyz;
	//vec3 t2=texture(iChannel2,fragCoord.xy/iResolution.xy).xyz;
    vec3 col = BufferA.sample(uv).xyz;
    vec3 light = normalize(vec3(.5,.5,2));
    vec3 n = normalize(vec3(getGrad(fragCoord,1.4, BufferA),1.));
    float spec = dot(reflect(vec3(0,0,-1),n),light);
    float diff = clamp(dot(light,n),0.,1.);
    float h = smoothstep(.5,1.,col.x);
    float shin = mix(1.,200.,1.-h);
    spec = pow(clamp(spec,0.,1.),shin)*shin/100.;
    col = mix(vec3(0.0,.0,.4),vec3(1,.97,.9)*.7+0.3*t1,h);
    float vignette=cos(1.7*length((fragCoord.xy -0.5 * iResolution.xy) / iResolution.y));
	Return.xyz = (col*diff + 0.8*spec)*vignette;

    // (1.0*fragCoord.xy-0.5*iResolution.xy) / iResolution.y
}
