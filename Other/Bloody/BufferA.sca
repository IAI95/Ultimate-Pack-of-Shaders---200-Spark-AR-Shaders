// Originally from tomkh's wave equation solver
// https://www.shadertoy.com/view/Xsd3DB
//

#define HEIGHTMAPSCALE 99.0

vec3 cam( in vec2 p, out vec3 cameraPos )
{
    // camera orbits around origin
    float camRadius = 30.0;
	float theta = -3.141592653/2.;
    float xoff = 30.0 * cos(theta);
    float zoff = 30.0 * sin(theta);
    cameraPos = vec3(xoff,34.0,zoff);
     
    // camera target
    vec3 target = vec3(0.,0.,-27.0);
     
    // camera frame
    vec3 fo = normalize(target-cameraPos);
    vec3 ri = normalize(vec3(fo.z, 0., -fo.x ));
    vec3 up = normalize(cross(fo,ri));
     
    // multiplier to emulate a fov control
    float fov = .5;
	
    // ray direction
    vec3 rayDir = normalize(fo + fov*p.x*ri + fov*p.y*up);
	
	return rayDir;
}

void mainImage( in int iFrame, in vec3 ScreenPan, in std::Texture2d BufferA, in std::Texture2d BufferB, out vec4 Return )
{
    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();

    vec3 e = vec3(vec2(1.)/iResolution.xy,0.);
    vec2 q = fragCoord.xy/iResolution.xy;

    float p11 = BufferA.sample(q).x;
    float p10 = BufferB.sample(q-e.zy).x;
    float p01 = BufferB.sample(q-e.xz).x;
    float p21 = BufferB.sample(q+e.xz).x;
    float p12 = BufferB.sample(q+e.zy).x;

    // accel on fluid surface
    float d = 0.;

    if( ScreenPan.z > 0. )
    {
        vec3 ro;
        vec3 rd = cam( 2.*ScreenPan.xy/iResolution.xy - 1., ro );
        if( rd.y < 0. )
        {
            vec3 mp = ro + rd * ro.y/-rd.y;
            vec2 uv = mp.xz/HEIGHTMAPSCALE + 0.5;
            float screenscale = iResolution.x/iResolution.y;
            d += .06*smoothstep(20.*screenscale,5.*screenscale,length(uv*iResolution.xy - fragCoord.xy));
        }
    }
    
    // force from video sampled by buffer B to avoid vid sync problems
    d += BufferB.sample(q).y;

    // The actual propagation:
    d += -(p11-.5)*2. + (p10 + p01 + p21 + p12 - 2.);
    d *= .97; // damping
    if( iFrame == 0 ) d = 0.;
    d = d*.5 + .5;

    Return = vec4(d, 0.0, 0.0, 1.0);
}

