// copy of the original - https://www.shadertoy.com/view/3ty3Dd
// +AO++
// copy of the original - https://www.shadertoy.com/view/3ty3Dd
// +AO++
#define AA 2

const float pi = 3.14159265;
const float tau = 6.2831853;
const float e = 2.71828;


float sinh(float x)
{
    return (pow(e, x) - pow(e, -x)) / 2.0;
}
float cosh (float x)
{
    return (pow(e, x) + pow(e, -x)) / 2.0;
}
float tanh (float x)
{
    return sinh(x) / cosh(x);
}
float box (in float x, in float x1, in float x2, in float a, in float b)
{
     float pon = tanh(a * (x - x1)) + tanh(-b * (x - x2));
	 return pon;
}


float sdSphere( vec3 p, float s )
{
    return length(p)-s;
}
float smin( float a, float b, float k )
{
    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );
    return mix( b, a, h ) - k*h*(1.0-h);
}

float ex (in float z, in float z0, in float s) {
    return exp(-(z - z0) * (z - z0) / s);
}

float r(in float z, in float x) {
    float s = sin (tau * x), c = cos(tau * x),
		c2 = cos (pi * x), t4z = tanh(4. * z);
    return /* body */.4 * (1.0 - .4 * ex(z, .8, .15) +
		s * s + .6 * ex(z, .8, .25) * c * c + .3 * c) *
		0.5 * (1. + t4z) + /* legs */ (1. - .2 * ex(z, -1.3, .9)) *
		0.5 * (1. - t4z) * (.5 * (1. + s * s + .3 * c) *
		(pow(abs(s), 1.3) + .08 * (1. + t4z) ) ) +
		/* improve butt */ .13 * box(c2, -.45, .45, 5., 5.) *
		box(z, -.5, .2, 4., 2.) - 0.1 * box(c2, -.008, .008, 30., 30.) *
		box(z, -.4, .25, 8., 6.) - .05 * pow(abs(sin(pi * x)), 16.) * box(z, -.55, -.35, 8., 18.);
}

// $1M question: how close are we to ParametricPlot3D[...] surface?
float sd( in vec3 p, vec2 ScreenPan )
{
	/* shift butt belly */
	float dx = .1 * exp(-pow((p.z-.8),2.)/.6) - .18 * exp(-pow((p.z -.1),2.)/.4);

    // on the surface, we have:
    // p.x = r * cos + dx
	// p.y = r * sin
	
    float jiggle = p.z*1.75;
    float jsize = 0.5;
    vec2 ScreenPanNorm = ScreenPan / std::getRenderTargetSize();
    if (ScreenPan.x>0.5)
    {
        jiggle+=p.y*.5;
        jsize+=.175;
    }
    float iTime = std::getTime();
	dx *= 1.5+(sin(jiggle+iTime*9.65)*jsize);
	
	float angle = atan(p.y, p.x - dx);
	float r_expected = r(p.z, angle / tau);
//	float d1 = (.5 + .5 * smoothstep(.4,1.,p.z)) * (length(vec2(p.y, p.x - dx)) - r_expected);
	float d1 = (length(vec2(p.y, p.x - dx)) - r_expected)*0.5;
    
    p.x -= dx;
	float d2 = sdSphere(p+vec3(-0.35,0.4,-1.875),0.4);
	float d3 = sdSphere(p+vec3(-0.35,-0.4,-1.875),0.4);
    d2 = smin(d2,d3,0.35);
    return smin(d1,d2,0.07);
    //return min(d1,min(d2,d3));
}


float map( in vec3 pos, vec2 ScreenPan )
{
    return sd (pos.zxy, ScreenPan);
}

// https://iquilezles.org/articles/normalsSDF
vec3 calcNormal( in vec3 pos, vec2 ScreenPan )
{
    vec2 e = vec2(1.0,-1.0)*0.5773;
    const float eps = 0.001;
    return normalize( e.xyy*map( pos + e.xyy*eps, ScreenPan ) + 
					  e.yyx*map( pos + e.yyx*eps, ScreenPan ) + 
					  e.yxy*map( pos + e.yxy*eps, ScreenPan ) + 
					  e.xxx*map( pos + e.xxx*eps, ScreenPan ) );
}

float calcAO(in vec3 pos, in vec3 nor, vec2 ScreenPan)
{
	float sca = 2.0, occ = 0.0;
    for( int i=0; i<5; i++ )
    {
        float hr = 0.01 + float(i)*0.5/4.0;        
        float dd = map(nor * hr + pos, ScreenPan);
        occ += (hr - dd)*sca;
        sca *= 0.7;
    }
    return clamp( 1.0 - occ, 0.0, 1.0 );    
}


void mainImage( in vec2 ScreenPan, out vec4 Return )
{

    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();

     // camera movement	
	float an =2.+sin(iTime+2.15)*0.7;	//0.5*iTime - 0.8;
    // if (iMouse.z>0.5)
        //an+=iMouse.x/(iResolution.x*0.25);
    //an+=3.14;
    
	vec3 ro = vec3( 2.55*sin(an), 0.5, 2.55*cos(an) );
    vec3 ta = vec3( 0.0, .8, 0.0 );
    // camera matrix
    vec3 ww = normalize( ta - ro );
    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );
    vec3 vv = normalize( cross(uu,ww));
    vec3 tot = vec3(0.0);
    
    vec2 p1 = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;
    float val = sin(iTime+p1.x*3.0+p1.y*20.0)*(0.8+sin(p1.y*24.4+iTime*3.0)*0.3);
    val = clamp(pow(abs(val),2.6),0.0,2.0);
    vec3 bcol = vec3(val*0.6,val*0.1,val*0.9);
	bcol *= length(p1*p1*p1);
    
    #if AA>1
    for( int m=0; m<AA; m++ )
    for( int n=0; n<AA; n++ )
    {
        // pixel coordinates
        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;
        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;
        #else    
        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;
        #endif
        
        vec3 col = bcol;
        // raymarch
        if (abs(p.x)<0.8)
        {
            // create view ray
            vec3 rd = normalize( p.x*uu + p.y*vv + 1.8*ww );
            
            const float tmax = 5.0;
            float t = 0.0;
            for( int i=0; i<200; i++ )
            {
                vec3 pos = ro + t*rd;
                float h = map(pos, ScreenPan);
                if( h<0.0001 || t>tmax ) break;
                t += h;
            }
            // shading/lighting	
            if( t<tmax )
            {
                vec3 pos = ro + t*rd;
                vec3 nor = calcNormal(pos, ScreenPan);
		    
		float ao = calcAO(pos,nor, ScreenPan);
		    
		    vec3 ln = normalize(vec3(1.1,-.52,-.4));
		    
	        float spec = pow(max( dot( reflect(-ln, nor), -rd ), 0.0 ), 20.0);
		    
                float dif = clamp( dot(nor,ln), 0.0, 1.0 );
                float amb = 0.25 + 0.5*dot(nor,vec3(.2,0.2,0.2));
                col = vec3(0.4,0.05,0.3)*amb + (vec3(1.1,0.6,0.4)*2.0)*dif*ao;
		    col *= 1.1+spec;
            }
        }

        // gamma        
        //col = sqrt( col );
	    tot += col;
    #if AA>1
    }
    tot /= float(AA*AA);
    #endif
    // gamma        
    tot = sqrt( tot );
    
   	vec2 qq = fragCoord.xy / iResolution.xy;
    tot *= 0.5 + 0.5*pow( 16.0*qq.x*qq.y*(1.0-qq.x)*(1.0-qq.y), 0.95 );
	Return = vec4( tot, 1.0 );
}

