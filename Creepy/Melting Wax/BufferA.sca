// created by florian berger (flockaroo) - 2016
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

// melting wax

// storing history of video in X/Y grid in this texture
// by dividing up the fb into Xnum*Ynum frames
// and render en effect on every frame
// in green-screen regions the effect will be applied continuously
// in other regions it will accumulate only between two concecutive frames of the history

precision highp float;

#define N(v) (v.yx*vec2(1,-1))

#define Xnum 4
#define Ynum 4
#define RotNum 5

#define Res  std::getRenderTargetSize()
#define Res1 std::getRenderTargetSize()

//#define keyTex iChannel3
//#define KEY_I texture(keyTex,vec2((105.5-32.0)/256.0,(0.5+0.0)/3.0)).x

vec4 getRand(vec2 coord, std::Texture2d tex16)
{
    return tex16.sample(coord.xy/Res1.xy);
}

vec4 randS(vec2 uv, std::Texture2d tex16)
{
    return tex16.sample(uv*Res.xy/Res1.xy)-vec4(0.5);
}

vec4 getCol(vec2 coord, std::Texture2d BufferA)
{
    return BufferA.sample(coord/Res.xy);
}

float getVal(vec2 coord, std::Texture2d BufferA)
{
    vec4 c = getCol(coord, BufferA);
	return dot(c.xyz,vec3(.3333));
	//return dot(c.xyz,c.xyz);
	//return length(getCol(coord, BufferA));
}

vec2 getGrad(vec2 coord, float eps, std::Texture2d BufferA)
{
    vec2 d = vec2(eps,0);
	return vec2(getVal(coord+d.xy, BufferA)-getVal(coord-d.xy, BufferA),
                getVal(coord+d.yx, BufferA)-getVal(coord-d.yx, BufferA))/eps;
}

float getRot(vec2 pos, vec2 b, std::Texture2d BufferA)
{
    float ang = 2.0*3.1415926535/float(RotNum);
    mat2 m = mat2(cos(ang),sin(ang),-sin(ang),cos(ang));
    mat2 mh = mat2(cos(ang*0.5),sin(ang*0.5),-sin(ang*0.5),cos(ang*0.5));

    vec2 p = b;
    float rot=0.0;
    for(int i=0;i<RotNum;i++)
    {
        rot+=dot(BufferA.sample(fract((pos+p)/Res.xy)).xy-vec2(0.5),p.yx*vec2(1,-1));
        p = m*p;
    }
    return rot/float(RotNum)/dot(b,b);
}

void effectFlow(inout vec4 Return, vec2 pos, std::Texture2d BufferA, std::Texture2d tex16, float iFrame)
{
    float rnd = randS(vec2(float(iFrame)/Res.x,0.5/Res1.y), tex16).x*1.;

    float ang = 2.0*3.1415926535/float(RotNum);
    mat2 m = mat2(cos(ang),sin(ang),-sin(ang),cos(ang));
    mat2 mh = mat2(cos(ang*0.5),sin(ang*0.5),-sin(ang*0.5),cos(ang*0.5));
    
    vec2 b = vec2(cos(ang*rnd),sin(ang*rnd));
    vec2 v=vec2(0);
    float bbMax=0.7*Res.y; bbMax*=bbMax;
    for(int l=0;l<3;l++)
    {
        if ( dot(b,b) > bbMax ) break;
        vec2 p = b;
        for(int i=0;i<RotNum;i++)
        {
#ifdef SUPPORT_EVEN_ROTNUM
            v+=p.yx*getRot(pos+p,-mh*b, BufferA);
#else
            // this is faster but works only for odd RotNum
            v+=p.yx*getRot(pos+p,b, BufferA);
#endif
            p = m*p;
        }
        b*=2.0;
    }
    
    Return=getCol(pos+v*vec2(-1,1)*4., BufferA);
}

void effectSmear(inout vec4 col, vec2 coord, std::Texture2d BufferA)
{
    vec2 g=getGrad(coord,.5, BufferA);
    col=getCol(coord+g.yx*vec2(1,-1)*.7, BufferA);
}

void effectDiff(inout vec4 col, vec2 coord, std::Texture2d BufferA)
{
    vec2 iResolution = std::getRenderTargetSize();

    vec2 g=getGrad(coord,.5, BufferA);
    col=getCol(coord+g.xy*1.5*iResolution.x/iResolution.y, BufferA);
}

void effect(inout vec4 col, vec2 coord, std::Texture2d BufferA, std::Texture2d tex16, in float iFrame, vec2 ScreenPan)
{
    vec2 iResolution = std::getRenderTargetSize();
    float iTime = std::getTime();

    vec4 col1,col2,col3;
    effectFlow(col1,coord, BufferA, tex16, iFrame);   // fluid effect
    effectSmear(col2,coord, BufferA);  // normal to gradient diffusion effect (smearing out a little)
    effectDiff(col3,coord, BufferA);   // gradient diffusion effect
    //col2=col;
    //float effType=.2;
    //float effType=.5-.5*sin(iTime*.5);
    float effType=smoothstep(.0,.2,-sin(iTime*.3-.3));
    if(ScreenPan.y>1.) effType=ScreenPan.y/iResolution.y;
    col=mix(col1,col3,effType);
    col=mix(col,col2,.3);
}


void mainImage( in float iFrame, in vec2 ScreenPan, in std::Texture2d BufferA, in std::Texture2d tex16, in std::Texture2d CameraTexture, out vec4 Return )
{
    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();

    vec2 uv = fragCoord/iResolution.xy*vec2(Xnum,Ynum);
    
    // uv of next frame i history
    vec2 uv2 = vec2(mod(uv.x-1.+float(Xnum),float(Xnum)),
                    uv.y-(((uv.x-1.)<0.)?1.:0.))/vec2(Xnum,Ynum);
    
    vec4 c1,c2;
    effect(c1,uv2*iResolution.xy, BufferA, tex16, iFrame, ScreenPan);  // effect on history frame
	effect(c2,fragCoord, BufferA, tex16, iFrame, ScreenPan);           // effect on every frame
    
    // copy a new frame on beginning of history (lower left edge)
    if(fragCoord.x<iResolution.x/float(Xnum) && fragCoord.y<iResolution.y/float(Ynum))
    {
	    vec4 col=CameraTexture.sample(uv);
    	float bgfact = dot(col.xyz,vec3(-1,2,-1));
        vec4 bg=vec4(1,.95,.75,1);
        bg = tex16.sample(fragCoord/iResolution.xy*.2).xyzw*.3+bg*.0;
		c1 = mix(col,bg,bgfact); // some bg color instead of green
		c1.w = bgfact; // store green-ness in .w
    }

    // mix together depending on green-ness
	Return = mix(c1,c2,smoothstep(.4,.5,c1.w));
}

