precision highp float;

#define PI 3.14159

// @param[default=0.2, min=0.05, max=0.5] Radius
// @param[default=0.5, min=-1.0, max=1.0] Angle

void mainImage( in float Radius, in float Angle, in vec2 ScreenPan_2D_Offset, in std::Texture2d Texture, out vec4 Return )
{

    vec2 iResolution = std::getRenderTargetSize();
    vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
    float iTime = std::getTime();

    ScreenPan_2D_Offset = ScreenPan_2D_Offset + iResolution / 2.0;

    Angle = Angle * PI;
    
    vec2 center = ScreenPan_2D_Offset.xy / iResolution.xy;
    center = center == vec2(0., 0.) ? vec2(.5, .5) : center;
    
    vec2 uv = fragCoord.xy / iResolution.xy - center;
    
    float len = length(uv * vec2(iResolution.x / iResolution.y, 1.));
    float angle = atan(uv.y, uv.x) + Angle * smoothstep(Radius, 0., len);
    float radius = length(uv);

    Return = Texture.sample(vec2(radius * cos(angle), radius * sin(angle)) + center);
}